
swv-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b04  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08002cc8  08002cc8  00012cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d54  08002d54  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002d54  08002d54  00012d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002d5c  08002d5c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d5c  08002d5c  00012d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d60  08002d60  00012d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002d64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000070  08002dd4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  08002dd4  000200e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008ce4  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001729  00000000  00000000  00028d84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000758  00000000  00000000  0002a4b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006c0  00000000  00000000  0002ac08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021ac7  00000000  00000000  0002b2c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000965b  00000000  00000000  0004cd8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c97fc  00000000  00000000  000563ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011fbe6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002350  00000000  00000000  0011fc38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000070 	.word	0x20000070
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002cb0 	.word	0x08002cb0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000074 	.word	0x20000074
 8000200:	08002cb0 	.word	0x08002cb0

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000510:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000514:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000518:	f003 0301 	and.w	r3, r3, #1
 800051c:	2b00      	cmp	r3, #0
 800051e:	d013      	beq.n	8000548 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000520:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000524:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000528:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800052c:	2b00      	cmp	r3, #0
 800052e:	d00b      	beq.n	8000548 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000530:	e000      	b.n	8000534 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000532:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000534:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d0f9      	beq.n	8000532 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800053e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000542:	687a      	ldr	r2, [r7, #4]
 8000544:	b2d2      	uxtb	r2, r2
 8000546:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000548:	687b      	ldr	r3, [r7, #4]
}
 800054a:	4618      	mov	r0, r3
 800054c:	370c      	adds	r7, #12
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr

08000556 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(uint8_t ch) {
 8000556:	b580      	push	{r7, lr}
 8000558:	b082      	sub	sp, #8
 800055a:	af00      	add	r7, sp, #0
 800055c:	4603      	mov	r3, r0
 800055e:	71fb      	strb	r3, [r7, #7]
	return ITM_SendChar(ch);
 8000560:	79fb      	ldrb	r3, [r7, #7]
 8000562:	4618      	mov	r0, r3
 8000564:	f7ff ffd0 	bl	8000508 <ITM_SendChar>
 8000568:	4603      	mov	r3, r0
}
 800056a:	4618      	mov	r0, r3
 800056c:	3708      	adds	r7, #8
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
	...

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000578:	f000 fa96 	bl	8000aa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057c:	f000 f80e 	bl	800059c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000580:	f000 f8a4 	bl	80006cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000584:	f000 f878 	bl	8000678 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	printf("Hello, SWO/SWV\r\n");
 8000588:	4803      	ldr	r0, [pc, #12]	; (8000598 <main+0x24>)
 800058a:	f001 ff01 	bl	8002390 <puts>
	HAL_Delay(1000);
 800058e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000592:	f000 fafb 	bl	8000b8c <HAL_Delay>
	printf("Hello, SWO/SWV\r\n");
 8000596:	e7f7      	b.n	8000588 <main+0x14>
 8000598:	08002cc8 	.word	0x08002cc8

0800059c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b094      	sub	sp, #80	; 0x50
 80005a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a2:	f107 031c 	add.w	r3, r7, #28
 80005a6:	2234      	movs	r2, #52	; 0x34
 80005a8:	2100      	movs	r1, #0
 80005aa:	4618      	mov	r0, r3
 80005ac:	f001 fe7a 	bl	80022a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b0:	f107 0308 	add.w	r3, r7, #8
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]
 80005be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c0:	2300      	movs	r3, #0
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	4b2a      	ldr	r3, [pc, #168]	; (8000670 <SystemClock_Config+0xd4>)
 80005c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c8:	4a29      	ldr	r2, [pc, #164]	; (8000670 <SystemClock_Config+0xd4>)
 80005ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ce:	6413      	str	r3, [r2, #64]	; 0x40
 80005d0:	4b27      	ldr	r3, [pc, #156]	; (8000670 <SystemClock_Config+0xd4>)
 80005d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d8:	607b      	str	r3, [r7, #4]
 80005da:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005dc:	2300      	movs	r3, #0
 80005de:	603b      	str	r3, [r7, #0]
 80005e0:	4b24      	ldr	r3, [pc, #144]	; (8000674 <SystemClock_Config+0xd8>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005e8:	4a22      	ldr	r2, [pc, #136]	; (8000674 <SystemClock_Config+0xd8>)
 80005ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ee:	6013      	str	r3, [r2, #0]
 80005f0:	4b20      	ldr	r3, [pc, #128]	; (8000674 <SystemClock_Config+0xd8>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005f8:	603b      	str	r3, [r7, #0]
 80005fa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005fc:	2302      	movs	r3, #2
 80005fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000600:	2301      	movs	r3, #1
 8000602:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000604:	2310      	movs	r3, #16
 8000606:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000608:	2302      	movs	r3, #2
 800060a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800060c:	2300      	movs	r3, #0
 800060e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000610:	2310      	movs	r3, #16
 8000612:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000614:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000618:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800061a:	2304      	movs	r3, #4
 800061c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800061e:	2302      	movs	r3, #2
 8000620:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000622:	2302      	movs	r3, #2
 8000624:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000626:	f107 031c 	add.w	r3, r7, #28
 800062a:	4618      	mov	r0, r3
 800062c:	f001 f8b0 	bl	8001790 <HAL_RCC_OscConfig>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000636:	f000 f8b7 	bl	80007a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063a:	230f      	movs	r3, #15
 800063c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063e:	2302      	movs	r3, #2
 8000640:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000642:	2300      	movs	r3, #0
 8000644:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000646:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800064a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000650:	f107 0308 	add.w	r3, r7, #8
 8000654:	2102      	movs	r1, #2
 8000656:	4618      	mov	r0, r3
 8000658:	f000 fd50 	bl	80010fc <HAL_RCC_ClockConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000662:	f000 f8a1 	bl	80007a8 <Error_Handler>
  }
}
 8000666:	bf00      	nop
 8000668:	3750      	adds	r7, #80	; 0x50
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40023800 	.word	0x40023800
 8000674:	40007000 	.word	0x40007000

08000678 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800067c:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 800067e:	4a12      	ldr	r2, [pc, #72]	; (80006c8 <MX_USART2_UART_Init+0x50>)
 8000680:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000682:	4b10      	ldr	r3, [pc, #64]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 8000684:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000688:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800068a:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000690:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 8000692:	2200      	movs	r2, #0
 8000694:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000696:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 8000698:	2200      	movs	r2, #0
 800069a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800069c:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 800069e:	220c      	movs	r2, #12
 80006a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a2:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ae:	4805      	ldr	r0, [pc, #20]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 80006b0:	f001 fb0c 	bl	8001ccc <HAL_UART_Init>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006ba:	f000 f875 	bl	80007a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	2000008c 	.word	0x2000008c
 80006c8:	40004400 	.word	0x40004400

080006cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b08a      	sub	sp, #40	; 0x28
 80006d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d2:	f107 0314 	add.w	r3, r7, #20
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
 80006e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	613b      	str	r3, [r7, #16]
 80006e6:	4b2d      	ldr	r3, [pc, #180]	; (800079c <MX_GPIO_Init+0xd0>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a2c      	ldr	r2, [pc, #176]	; (800079c <MX_GPIO_Init+0xd0>)
 80006ec:	f043 0304 	orr.w	r3, r3, #4
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b2a      	ldr	r3, [pc, #168]	; (800079c <MX_GPIO_Init+0xd0>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f003 0304 	and.w	r3, r3, #4
 80006fa:	613b      	str	r3, [r7, #16]
 80006fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	60fb      	str	r3, [r7, #12]
 8000702:	4b26      	ldr	r3, [pc, #152]	; (800079c <MX_GPIO_Init+0xd0>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4a25      	ldr	r2, [pc, #148]	; (800079c <MX_GPIO_Init+0xd0>)
 8000708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	4b23      	ldr	r3, [pc, #140]	; (800079c <MX_GPIO_Init+0xd0>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	60bb      	str	r3, [r7, #8]
 800071e:	4b1f      	ldr	r3, [pc, #124]	; (800079c <MX_GPIO_Init+0xd0>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a1e      	ldr	r2, [pc, #120]	; (800079c <MX_GPIO_Init+0xd0>)
 8000724:	f043 0301 	orr.w	r3, r3, #1
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b1c      	ldr	r3, [pc, #112]	; (800079c <MX_GPIO_Init+0xd0>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	4b18      	ldr	r3, [pc, #96]	; (800079c <MX_GPIO_Init+0xd0>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a17      	ldr	r2, [pc, #92]	; (800079c <MX_GPIO_Init+0xd0>)
 8000740:	f043 0302 	orr.w	r3, r3, #2
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4b15      	ldr	r3, [pc, #84]	; (800079c <MX_GPIO_Init+0xd0>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f003 0302 	and.w	r3, r3, #2
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000752:	2200      	movs	r2, #0
 8000754:	2120      	movs	r1, #32
 8000756:	4812      	ldr	r0, [pc, #72]	; (80007a0 <MX_GPIO_Init+0xd4>)
 8000758:	f000 fcb6 	bl	80010c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800075c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000760:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000762:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000766:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	2300      	movs	r3, #0
 800076a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800076c:	f107 0314 	add.w	r3, r7, #20
 8000770:	4619      	mov	r1, r3
 8000772:	480c      	ldr	r0, [pc, #48]	; (80007a4 <MX_GPIO_Init+0xd8>)
 8000774:	f000 fb14 	bl	8000da0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000778:	2320      	movs	r3, #32
 800077a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077c:	2301      	movs	r3, #1
 800077e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000784:	2300      	movs	r3, #0
 8000786:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000788:	f107 0314 	add.w	r3, r7, #20
 800078c:	4619      	mov	r1, r3
 800078e:	4804      	ldr	r0, [pc, #16]	; (80007a0 <MX_GPIO_Init+0xd4>)
 8000790:	f000 fb06 	bl	8000da0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000794:	bf00      	nop
 8000796:	3728      	adds	r7, #40	; 0x28
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40023800 	.word	0x40023800
 80007a0:	40020000 	.word	0x40020000
 80007a4:	40020800 	.word	0x40020800

080007a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007ac:	b672      	cpsid	i
}
 80007ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b0:	e7fe      	b.n	80007b0 <Error_Handler+0x8>
	...

080007b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	4b10      	ldr	r3, [pc, #64]	; (8000800 <HAL_MspInit+0x4c>)
 80007c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007c2:	4a0f      	ldr	r2, [pc, #60]	; (8000800 <HAL_MspInit+0x4c>)
 80007c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007c8:	6453      	str	r3, [r2, #68]	; 0x44
 80007ca:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <HAL_MspInit+0x4c>)
 80007cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	603b      	str	r3, [r7, #0]
 80007da:	4b09      	ldr	r3, [pc, #36]	; (8000800 <HAL_MspInit+0x4c>)
 80007dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007de:	4a08      	ldr	r2, [pc, #32]	; (8000800 <HAL_MspInit+0x4c>)
 80007e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e4:	6413      	str	r3, [r2, #64]	; 0x40
 80007e6:	4b06      	ldr	r3, [pc, #24]	; (8000800 <HAL_MspInit+0x4c>)
 80007e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ee:	603b      	str	r3, [r7, #0]
 80007f0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007f2:	2007      	movs	r0, #7
 80007f4:	f000 faa0 	bl	8000d38 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007f8:	bf00      	nop
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40023800 	.word	0x40023800

08000804 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08a      	sub	sp, #40	; 0x28
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080c:	f107 0314 	add.w	r3, r7, #20
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]
 800081a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a19      	ldr	r2, [pc, #100]	; (8000888 <HAL_UART_MspInit+0x84>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d12b      	bne.n	800087e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	613b      	str	r3, [r7, #16]
 800082a:	4b18      	ldr	r3, [pc, #96]	; (800088c <HAL_UART_MspInit+0x88>)
 800082c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082e:	4a17      	ldr	r2, [pc, #92]	; (800088c <HAL_UART_MspInit+0x88>)
 8000830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000834:	6413      	str	r3, [r2, #64]	; 0x40
 8000836:	4b15      	ldr	r3, [pc, #84]	; (800088c <HAL_UART_MspInit+0x88>)
 8000838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800083e:	613b      	str	r3, [r7, #16]
 8000840:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	4b11      	ldr	r3, [pc, #68]	; (800088c <HAL_UART_MspInit+0x88>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a10      	ldr	r2, [pc, #64]	; (800088c <HAL_UART_MspInit+0x88>)
 800084c:	f043 0301 	orr.w	r3, r3, #1
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b0e      	ldr	r3, [pc, #56]	; (800088c <HAL_UART_MspInit+0x88>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0301 	and.w	r3, r3, #1
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800085e:	230c      	movs	r3, #12
 8000860:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000862:	2302      	movs	r3, #2
 8000864:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800086a:	2303      	movs	r3, #3
 800086c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800086e:	2307      	movs	r3, #7
 8000870:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000872:	f107 0314 	add.w	r3, r7, #20
 8000876:	4619      	mov	r1, r3
 8000878:	4805      	ldr	r0, [pc, #20]	; (8000890 <HAL_UART_MspInit+0x8c>)
 800087a:	f000 fa91 	bl	8000da0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800087e:	bf00      	nop
 8000880:	3728      	adds	r7, #40	; 0x28
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40004400 	.word	0x40004400
 800088c:	40023800 	.word	0x40023800
 8000890:	40020000 	.word	0x40020000

08000894 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000898:	e7fe      	b.n	8000898 <NMI_Handler+0x4>

0800089a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800089e:	e7fe      	b.n	800089e <HardFault_Handler+0x4>

080008a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <MemManage_Handler+0x4>

080008a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008aa:	e7fe      	b.n	80008aa <BusFault_Handler+0x4>

080008ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <UsageFault_Handler+0x4>

080008b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008b6:	bf00      	nop
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr

080008c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008c4:	bf00      	nop
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr

080008ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr

080008dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008e0:	f000 f934 	bl	8000b4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b086      	sub	sp, #24
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	60f8      	str	r0, [r7, #12]
 80008f0:	60b9      	str	r1, [r7, #8]
 80008f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008f4:	2300      	movs	r3, #0
 80008f6:	617b      	str	r3, [r7, #20]
 80008f8:	e00a      	b.n	8000910 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008fa:	f3af 8000 	nop.w
 80008fe:	4601      	mov	r1, r0
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	1c5a      	adds	r2, r3, #1
 8000904:	60ba      	str	r2, [r7, #8]
 8000906:	b2ca      	uxtb	r2, r1
 8000908:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800090a:	697b      	ldr	r3, [r7, #20]
 800090c:	3301      	adds	r3, #1
 800090e:	617b      	str	r3, [r7, #20]
 8000910:	697a      	ldr	r2, [r7, #20]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	429a      	cmp	r2, r3
 8000916:	dbf0      	blt.n	80008fa <_read+0x12>
  }

  return len;
 8000918:	687b      	ldr	r3, [r7, #4]
}
 800091a:	4618      	mov	r0, r3
 800091c:	3718      	adds	r7, #24
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}

08000922 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000922:	b580      	push	{r7, lr}
 8000924:	b086      	sub	sp, #24
 8000926:	af00      	add	r7, sp, #0
 8000928:	60f8      	str	r0, [r7, #12]
 800092a:	60b9      	str	r1, [r7, #8]
 800092c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800092e:	2300      	movs	r3, #0
 8000930:	617b      	str	r3, [r7, #20]
 8000932:	e009      	b.n	8000948 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	1c5a      	adds	r2, r3, #1
 8000938:	60ba      	str	r2, [r7, #8]
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	4618      	mov	r0, r3
 800093e:	f7ff fe0a 	bl	8000556 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000942:	697b      	ldr	r3, [r7, #20]
 8000944:	3301      	adds	r3, #1
 8000946:	617b      	str	r3, [r7, #20]
 8000948:	697a      	ldr	r2, [r7, #20]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	429a      	cmp	r2, r3
 800094e:	dbf1      	blt.n	8000934 <_write+0x12>
  }
  return len;
 8000950:	687b      	ldr	r3, [r7, #4]
}
 8000952:	4618      	mov	r0, r3
 8000954:	3718      	adds	r7, #24
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}

0800095a <_close>:

int _close(int file)
{
 800095a:	b480      	push	{r7}
 800095c:	b083      	sub	sp, #12
 800095e:	af00      	add	r7, sp, #0
 8000960:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000962:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000966:	4618      	mov	r0, r3
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr

08000972 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000972:	b480      	push	{r7}
 8000974:	b083      	sub	sp, #12
 8000976:	af00      	add	r7, sp, #0
 8000978:	6078      	str	r0, [r7, #4]
 800097a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000982:	605a      	str	r2, [r3, #4]
  return 0;
 8000984:	2300      	movs	r3, #0
}
 8000986:	4618      	mov	r0, r3
 8000988:	370c      	adds	r7, #12
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr

08000992 <_isatty>:

int _isatty(int file)
{
 8000992:	b480      	push	{r7}
 8000994:	b083      	sub	sp, #12
 8000996:	af00      	add	r7, sp, #0
 8000998:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800099a:	2301      	movs	r3, #1
}
 800099c:	4618      	mov	r0, r3
 800099e:	370c      	adds	r7, #12
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr

080009a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b085      	sub	sp, #20
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	60f8      	str	r0, [r7, #12]
 80009b0:	60b9      	str	r1, [r7, #8]
 80009b2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009b4:	2300      	movs	r3, #0
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3714      	adds	r7, #20
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
	...

080009c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b086      	sub	sp, #24
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009cc:	4a14      	ldr	r2, [pc, #80]	; (8000a20 <_sbrk+0x5c>)
 80009ce:	4b15      	ldr	r3, [pc, #84]	; (8000a24 <_sbrk+0x60>)
 80009d0:	1ad3      	subs	r3, r2, r3
 80009d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009d8:	4b13      	ldr	r3, [pc, #76]	; (8000a28 <_sbrk+0x64>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d102      	bne.n	80009e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009e0:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <_sbrk+0x64>)
 80009e2:	4a12      	ldr	r2, [pc, #72]	; (8000a2c <_sbrk+0x68>)
 80009e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009e6:	4b10      	ldr	r3, [pc, #64]	; (8000a28 <_sbrk+0x64>)
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4413      	add	r3, r2
 80009ee:	693a      	ldr	r2, [r7, #16]
 80009f0:	429a      	cmp	r2, r3
 80009f2:	d207      	bcs.n	8000a04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009f4:	f001 fc2c 	bl	8002250 <__errno>
 80009f8:	4603      	mov	r3, r0
 80009fa:	220c      	movs	r2, #12
 80009fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a02:	e009      	b.n	8000a18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a04:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <_sbrk+0x64>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a0a:	4b07      	ldr	r3, [pc, #28]	; (8000a28 <_sbrk+0x64>)
 8000a0c:	681a      	ldr	r2, [r3, #0]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4413      	add	r3, r2
 8000a12:	4a05      	ldr	r2, [pc, #20]	; (8000a28 <_sbrk+0x64>)
 8000a14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a16:	68fb      	ldr	r3, [r7, #12]
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3718      	adds	r7, #24
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	20020000 	.word	0x20020000
 8000a24:	00000400 	.word	0x00000400
 8000a28:	200000d0 	.word	0x200000d0
 8000a2c:	200000e8 	.word	0x200000e8

08000a30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a34:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <SystemInit+0x20>)
 8000a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a3a:	4a05      	ldr	r2, [pc, #20]	; (8000a50 <SystemInit+0x20>)
 8000a3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	e000ed00 	.word	0xe000ed00

08000a54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a8c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a58:	480d      	ldr	r0, [pc, #52]	; (8000a90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a5a:	490e      	ldr	r1, [pc, #56]	; (8000a94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a5c:	4a0e      	ldr	r2, [pc, #56]	; (8000a98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a60:	e002      	b.n	8000a68 <LoopCopyDataInit>

08000a62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a66:	3304      	adds	r3, #4

08000a68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a6c:	d3f9      	bcc.n	8000a62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a6e:	4a0b      	ldr	r2, [pc, #44]	; (8000a9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a70:	4c0b      	ldr	r4, [pc, #44]	; (8000aa0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a74:	e001      	b.n	8000a7a <LoopFillZerobss>

08000a76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a78:	3204      	adds	r2, #4

08000a7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a7c:	d3fb      	bcc.n	8000a76 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a7e:	f7ff ffd7 	bl	8000a30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a82:	f001 fbeb 	bl	800225c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a86:	f7ff fd75 	bl	8000574 <main>
  bx  lr    
 8000a8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a94:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a98:	08002d64 	.word	0x08002d64
  ldr r2, =_sbss
 8000a9c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000aa0:	200000e8 	.word	0x200000e8

08000aa4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000aa4:	e7fe      	b.n	8000aa4 <ADC_IRQHandler>
	...

08000aa8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000aac:	4b0e      	ldr	r3, [pc, #56]	; (8000ae8 <HAL_Init+0x40>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a0d      	ldr	r2, [pc, #52]	; (8000ae8 <HAL_Init+0x40>)
 8000ab2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ab6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ab8:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <HAL_Init+0x40>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a0a      	ldr	r2, [pc, #40]	; (8000ae8 <HAL_Init+0x40>)
 8000abe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ac2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ac4:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <HAL_Init+0x40>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a07      	ldr	r2, [pc, #28]	; (8000ae8 <HAL_Init+0x40>)
 8000aca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ace:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ad0:	2003      	movs	r0, #3
 8000ad2:	f000 f931 	bl	8000d38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ad6:	2000      	movs	r0, #0
 8000ad8:	f000 f808 	bl	8000aec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000adc:	f7ff fe6a 	bl	80007b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ae0:	2300      	movs	r3, #0
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40023c00 	.word	0x40023c00

08000aec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000af4:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <HAL_InitTick+0x54>)
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <HAL_InitTick+0x58>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	4619      	mov	r1, r3
 8000afe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f000 f93b 	bl	8000d86 <HAL_SYSTICK_Config>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b16:	2301      	movs	r3, #1
 8000b18:	e00e      	b.n	8000b38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2b0f      	cmp	r3, #15
 8000b1e:	d80a      	bhi.n	8000b36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b20:	2200      	movs	r2, #0
 8000b22:	6879      	ldr	r1, [r7, #4]
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b28:	f000 f911 	bl	8000d4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b2c:	4a06      	ldr	r2, [pc, #24]	; (8000b48 <HAL_InitTick+0x5c>)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b32:	2300      	movs	r3, #0
 8000b34:	e000      	b.n	8000b38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	20000000 	.word	0x20000000
 8000b44:	20000008 	.word	0x20000008
 8000b48:	20000004 	.word	0x20000004

08000b4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b50:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <HAL_IncTick+0x20>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	461a      	mov	r2, r3
 8000b56:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <HAL_IncTick+0x24>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4413      	add	r3, r2
 8000b5c:	4a04      	ldr	r2, [pc, #16]	; (8000b70 <HAL_IncTick+0x24>)
 8000b5e:	6013      	str	r3, [r2, #0]
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	20000008 	.word	0x20000008
 8000b70:	200000d4 	.word	0x200000d4

08000b74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  return uwTick;
 8000b78:	4b03      	ldr	r3, [pc, #12]	; (8000b88 <HAL_GetTick+0x14>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	200000d4 	.word	0x200000d4

08000b8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b94:	f7ff ffee 	bl	8000b74 <HAL_GetTick>
 8000b98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ba4:	d005      	beq.n	8000bb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ba6:	4b0a      	ldr	r3, [pc, #40]	; (8000bd0 <HAL_Delay+0x44>)
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	461a      	mov	r2, r3
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	4413      	add	r3, r2
 8000bb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bb2:	bf00      	nop
 8000bb4:	f7ff ffde 	bl	8000b74 <HAL_GetTick>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	1ad3      	subs	r3, r2, r3
 8000bbe:	68fa      	ldr	r2, [r7, #12]
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	d8f7      	bhi.n	8000bb4 <HAL_Delay+0x28>
  {
  }
}
 8000bc4:	bf00      	nop
 8000bc6:	bf00      	nop
 8000bc8:	3710      	adds	r7, #16
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	20000008 	.word	0x20000008

08000bd4 <__NVIC_SetPriorityGrouping>:
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f003 0307 	and.w	r3, r3, #7
 8000be2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000be4:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <__NVIC_SetPriorityGrouping+0x44>)
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bea:	68ba      	ldr	r2, [r7, #8]
 8000bec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c06:	4a04      	ldr	r2, [pc, #16]	; (8000c18 <__NVIC_SetPriorityGrouping+0x44>)
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	60d3      	str	r3, [r2, #12]
}
 8000c0c:	bf00      	nop
 8000c0e:	3714      	adds	r7, #20
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <__NVIC_GetPriorityGrouping>:
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c20:	4b04      	ldr	r3, [pc, #16]	; (8000c34 <__NVIC_GetPriorityGrouping+0x18>)
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	0a1b      	lsrs	r3, r3, #8
 8000c26:	f003 0307 	and.w	r3, r3, #7
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <__NVIC_SetPriority>:
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	6039      	str	r1, [r7, #0]
 8000c42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	db0a      	blt.n	8000c62 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	b2da      	uxtb	r2, r3
 8000c50:	490c      	ldr	r1, [pc, #48]	; (8000c84 <__NVIC_SetPriority+0x4c>)
 8000c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c56:	0112      	lsls	r2, r2, #4
 8000c58:	b2d2      	uxtb	r2, r2
 8000c5a:	440b      	add	r3, r1
 8000c5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000c60:	e00a      	b.n	8000c78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	b2da      	uxtb	r2, r3
 8000c66:	4908      	ldr	r1, [pc, #32]	; (8000c88 <__NVIC_SetPriority+0x50>)
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	f003 030f 	and.w	r3, r3, #15
 8000c6e:	3b04      	subs	r3, #4
 8000c70:	0112      	lsls	r2, r2, #4
 8000c72:	b2d2      	uxtb	r2, r2
 8000c74:	440b      	add	r3, r1
 8000c76:	761a      	strb	r2, [r3, #24]
}
 8000c78:	bf00      	nop
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	e000e100 	.word	0xe000e100
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <NVIC_EncodePriority>:
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b089      	sub	sp, #36	; 0x24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	f003 0307 	and.w	r3, r3, #7
 8000c9e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ca0:	69fb      	ldr	r3, [r7, #28]
 8000ca2:	f1c3 0307 	rsb	r3, r3, #7
 8000ca6:	2b04      	cmp	r3, #4
 8000ca8:	bf28      	it	cs
 8000caa:	2304      	movcs	r3, #4
 8000cac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	3304      	adds	r3, #4
 8000cb2:	2b06      	cmp	r3, #6
 8000cb4:	d902      	bls.n	8000cbc <NVIC_EncodePriority+0x30>
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	3b03      	subs	r3, #3
 8000cba:	e000      	b.n	8000cbe <NVIC_EncodePriority+0x32>
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cc4:	69bb      	ldr	r3, [r7, #24]
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	43da      	mvns	r2, r3
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	401a      	ands	r2, r3
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cd4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	fa01 f303 	lsl.w	r3, r1, r3
 8000cde:	43d9      	mvns	r1, r3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce4:	4313      	orrs	r3, r2
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3724      	adds	r7, #36	; 0x24
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
	...

08000cf4 <SysTick_Config>:
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	3b01      	subs	r3, #1
 8000d00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d04:	d301      	bcc.n	8000d0a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000d06:	2301      	movs	r3, #1
 8000d08:	e00f      	b.n	8000d2a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d0a:	4a0a      	ldr	r2, [pc, #40]	; (8000d34 <SysTick_Config+0x40>)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	3b01      	subs	r3, #1
 8000d10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d12:	210f      	movs	r1, #15
 8000d14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d18:	f7ff ff8e 	bl	8000c38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d1c:	4b05      	ldr	r3, [pc, #20]	; (8000d34 <SysTick_Config+0x40>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d22:	4b04      	ldr	r3, [pc, #16]	; (8000d34 <SysTick_Config+0x40>)
 8000d24:	2207      	movs	r2, #7
 8000d26:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000d28:	2300      	movs	r3, #0
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	e000e010 	.word	0xe000e010

08000d38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d40:	6878      	ldr	r0, [r7, #4]
 8000d42:	f7ff ff47 	bl	8000bd4 <__NVIC_SetPriorityGrouping>
}
 8000d46:	bf00      	nop
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b086      	sub	sp, #24
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	4603      	mov	r3, r0
 8000d56:	60b9      	str	r1, [r7, #8]
 8000d58:	607a      	str	r2, [r7, #4]
 8000d5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d60:	f7ff ff5c 	bl	8000c1c <__NVIC_GetPriorityGrouping>
 8000d64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d66:	687a      	ldr	r2, [r7, #4]
 8000d68:	68b9      	ldr	r1, [r7, #8]
 8000d6a:	6978      	ldr	r0, [r7, #20]
 8000d6c:	f7ff ff8e 	bl	8000c8c <NVIC_EncodePriority>
 8000d70:	4602      	mov	r2, r0
 8000d72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d76:	4611      	mov	r1, r2
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff ff5d 	bl	8000c38 <__NVIC_SetPriority>
}
 8000d7e:	bf00      	nop
 8000d80:	3718      	adds	r7, #24
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b082      	sub	sp, #8
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f7ff ffb0 	bl	8000cf4 <SysTick_Config>
 8000d94:	4603      	mov	r3, r0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
	...

08000da0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b089      	sub	sp, #36	; 0x24
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000daa:	2300      	movs	r3, #0
 8000dac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dae:	2300      	movs	r3, #0
 8000db0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000db2:	2300      	movs	r3, #0
 8000db4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000db6:	2300      	movs	r3, #0
 8000db8:	61fb      	str	r3, [r7, #28]
 8000dba:	e165      	b.n	8001088 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	697a      	ldr	r2, [r7, #20]
 8000dcc:	4013      	ands	r3, r2
 8000dce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000dd0:	693a      	ldr	r2, [r7, #16]
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	f040 8154 	bne.w	8001082 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f003 0303 	and.w	r3, r3, #3
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d005      	beq.n	8000df2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dee:	2b02      	cmp	r3, #2
 8000df0:	d130      	bne.n	8000e54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	689b      	ldr	r3, [r3, #8]
 8000df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	2203      	movs	r2, #3
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	43db      	mvns	r3, r3
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	4013      	ands	r3, r2
 8000e08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	68da      	ldr	r2, [r3, #12]
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	69ba      	ldr	r2, [r7, #24]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e28:	2201      	movs	r2, #1
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	43db      	mvns	r3, r3
 8000e32:	69ba      	ldr	r2, [r7, #24]
 8000e34:	4013      	ands	r3, r2
 8000e36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	091b      	lsrs	r3, r3, #4
 8000e3e:	f003 0201 	and.w	r2, r3, #1
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f003 0303 	and.w	r3, r3, #3
 8000e5c:	2b03      	cmp	r3, #3
 8000e5e:	d017      	beq.n	8000e90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	2203      	movs	r2, #3
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	43db      	mvns	r3, r3
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	4013      	ands	r3, r2
 8000e76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	689a      	ldr	r2, [r3, #8]
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f003 0303 	and.w	r3, r3, #3
 8000e98:	2b02      	cmp	r3, #2
 8000e9a:	d123      	bne.n	8000ee4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	08da      	lsrs	r2, r3, #3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3208      	adds	r2, #8
 8000ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	f003 0307 	and.w	r3, r3, #7
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	220f      	movs	r2, #15
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	691a      	ldr	r2, [r3, #16]
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	f003 0307 	and.w	r3, r3, #7
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	08da      	lsrs	r2, r3, #3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	3208      	adds	r2, #8
 8000ede:	69b9      	ldr	r1, [r7, #24]
 8000ee0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	2203      	movs	r2, #3
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f003 0203 	and.w	r2, r3, #3
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	f000 80ae 	beq.w	8001082 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	4b5d      	ldr	r3, [pc, #372]	; (80010a0 <HAL_GPIO_Init+0x300>)
 8000f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2e:	4a5c      	ldr	r2, [pc, #368]	; (80010a0 <HAL_GPIO_Init+0x300>)
 8000f30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f34:	6453      	str	r3, [r2, #68]	; 0x44
 8000f36:	4b5a      	ldr	r3, [pc, #360]	; (80010a0 <HAL_GPIO_Init+0x300>)
 8000f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f42:	4a58      	ldr	r2, [pc, #352]	; (80010a4 <HAL_GPIO_Init+0x304>)
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	089b      	lsrs	r3, r3, #2
 8000f48:	3302      	adds	r3, #2
 8000f4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	f003 0303 	and.w	r3, r3, #3
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	220f      	movs	r2, #15
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	4013      	ands	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a4f      	ldr	r2, [pc, #316]	; (80010a8 <HAL_GPIO_Init+0x308>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d025      	beq.n	8000fba <HAL_GPIO_Init+0x21a>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a4e      	ldr	r2, [pc, #312]	; (80010ac <HAL_GPIO_Init+0x30c>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d01f      	beq.n	8000fb6 <HAL_GPIO_Init+0x216>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a4d      	ldr	r2, [pc, #308]	; (80010b0 <HAL_GPIO_Init+0x310>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d019      	beq.n	8000fb2 <HAL_GPIO_Init+0x212>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a4c      	ldr	r2, [pc, #304]	; (80010b4 <HAL_GPIO_Init+0x314>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d013      	beq.n	8000fae <HAL_GPIO_Init+0x20e>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a4b      	ldr	r2, [pc, #300]	; (80010b8 <HAL_GPIO_Init+0x318>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d00d      	beq.n	8000faa <HAL_GPIO_Init+0x20a>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a4a      	ldr	r2, [pc, #296]	; (80010bc <HAL_GPIO_Init+0x31c>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d007      	beq.n	8000fa6 <HAL_GPIO_Init+0x206>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a49      	ldr	r2, [pc, #292]	; (80010c0 <HAL_GPIO_Init+0x320>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d101      	bne.n	8000fa2 <HAL_GPIO_Init+0x202>
 8000f9e:	2306      	movs	r3, #6
 8000fa0:	e00c      	b.n	8000fbc <HAL_GPIO_Init+0x21c>
 8000fa2:	2307      	movs	r3, #7
 8000fa4:	e00a      	b.n	8000fbc <HAL_GPIO_Init+0x21c>
 8000fa6:	2305      	movs	r3, #5
 8000fa8:	e008      	b.n	8000fbc <HAL_GPIO_Init+0x21c>
 8000faa:	2304      	movs	r3, #4
 8000fac:	e006      	b.n	8000fbc <HAL_GPIO_Init+0x21c>
 8000fae:	2303      	movs	r3, #3
 8000fb0:	e004      	b.n	8000fbc <HAL_GPIO_Init+0x21c>
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	e002      	b.n	8000fbc <HAL_GPIO_Init+0x21c>
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e000      	b.n	8000fbc <HAL_GPIO_Init+0x21c>
 8000fba:	2300      	movs	r3, #0
 8000fbc:	69fa      	ldr	r2, [r7, #28]
 8000fbe:	f002 0203 	and.w	r2, r2, #3
 8000fc2:	0092      	lsls	r2, r2, #2
 8000fc4:	4093      	lsls	r3, r2
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fcc:	4935      	ldr	r1, [pc, #212]	; (80010a4 <HAL_GPIO_Init+0x304>)
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	089b      	lsrs	r3, r3, #2
 8000fd2:	3302      	adds	r3, #2
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fda:	4b3a      	ldr	r3, [pc, #232]	; (80010c4 <HAL_GPIO_Init+0x324>)
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d003      	beq.n	8000ffe <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ffe:	4a31      	ldr	r2, [pc, #196]	; (80010c4 <HAL_GPIO_Init+0x324>)
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001004:	4b2f      	ldr	r3, [pc, #188]	; (80010c4 <HAL_GPIO_Init+0x324>)
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	43db      	mvns	r3, r3
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	4013      	ands	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800101c:	2b00      	cmp	r3, #0
 800101e:	d003      	beq.n	8001028 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	4313      	orrs	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001028:	4a26      	ldr	r2, [pc, #152]	; (80010c4 <HAL_GPIO_Init+0x324>)
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800102e:	4b25      	ldr	r3, [pc, #148]	; (80010c4 <HAL_GPIO_Init+0x324>)
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	43db      	mvns	r3, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4013      	ands	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d003      	beq.n	8001052 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	4313      	orrs	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001052:	4a1c      	ldr	r2, [pc, #112]	; (80010c4 <HAL_GPIO_Init+0x324>)
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001058:	4b1a      	ldr	r3, [pc, #104]	; (80010c4 <HAL_GPIO_Init+0x324>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	43db      	mvns	r3, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4013      	ands	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001070:	2b00      	cmp	r3, #0
 8001072:	d003      	beq.n	800107c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	4313      	orrs	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800107c:	4a11      	ldr	r2, [pc, #68]	; (80010c4 <HAL_GPIO_Init+0x324>)
 800107e:	69bb      	ldr	r3, [r7, #24]
 8001080:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	3301      	adds	r3, #1
 8001086:	61fb      	str	r3, [r7, #28]
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	2b0f      	cmp	r3, #15
 800108c:	f67f ae96 	bls.w	8000dbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001090:	bf00      	nop
 8001092:	bf00      	nop
 8001094:	3724      	adds	r7, #36	; 0x24
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	40023800 	.word	0x40023800
 80010a4:	40013800 	.word	0x40013800
 80010a8:	40020000 	.word	0x40020000
 80010ac:	40020400 	.word	0x40020400
 80010b0:	40020800 	.word	0x40020800
 80010b4:	40020c00 	.word	0x40020c00
 80010b8:	40021000 	.word	0x40021000
 80010bc:	40021400 	.word	0x40021400
 80010c0:	40021800 	.word	0x40021800
 80010c4:	40013c00 	.word	0x40013c00

080010c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	460b      	mov	r3, r1
 80010d2:	807b      	strh	r3, [r7, #2]
 80010d4:	4613      	mov	r3, r2
 80010d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010d8:	787b      	ldrb	r3, [r7, #1]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d003      	beq.n	80010e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010de:	887a      	ldrh	r2, [r7, #2]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010e4:	e003      	b.n	80010ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010e6:	887b      	ldrh	r3, [r7, #2]
 80010e8:	041a      	lsls	r2, r3, #16
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	619a      	str	r2, [r3, #24]
}
 80010ee:	bf00      	nop
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
	...

080010fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d101      	bne.n	8001110 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800110c:	2301      	movs	r3, #1
 800110e:	e0cc      	b.n	80012aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001110:	4b68      	ldr	r3, [pc, #416]	; (80012b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f003 030f 	and.w	r3, r3, #15
 8001118:	683a      	ldr	r2, [r7, #0]
 800111a:	429a      	cmp	r2, r3
 800111c:	d90c      	bls.n	8001138 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800111e:	4b65      	ldr	r3, [pc, #404]	; (80012b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001120:	683a      	ldr	r2, [r7, #0]
 8001122:	b2d2      	uxtb	r2, r2
 8001124:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001126:	4b63      	ldr	r3, [pc, #396]	; (80012b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f003 030f 	and.w	r3, r3, #15
 800112e:	683a      	ldr	r2, [r7, #0]
 8001130:	429a      	cmp	r2, r3
 8001132:	d001      	beq.n	8001138 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001134:	2301      	movs	r3, #1
 8001136:	e0b8      	b.n	80012aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f003 0302 	and.w	r3, r3, #2
 8001140:	2b00      	cmp	r3, #0
 8001142:	d020      	beq.n	8001186 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f003 0304 	and.w	r3, r3, #4
 800114c:	2b00      	cmp	r3, #0
 800114e:	d005      	beq.n	800115c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001150:	4b59      	ldr	r3, [pc, #356]	; (80012b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	4a58      	ldr	r2, [pc, #352]	; (80012b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001156:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800115a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f003 0308 	and.w	r3, r3, #8
 8001164:	2b00      	cmp	r3, #0
 8001166:	d005      	beq.n	8001174 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001168:	4b53      	ldr	r3, [pc, #332]	; (80012b8 <HAL_RCC_ClockConfig+0x1bc>)
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	4a52      	ldr	r2, [pc, #328]	; (80012b8 <HAL_RCC_ClockConfig+0x1bc>)
 800116e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001172:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001174:	4b50      	ldr	r3, [pc, #320]	; (80012b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	494d      	ldr	r1, [pc, #308]	; (80012b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001182:	4313      	orrs	r3, r2
 8001184:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	2b00      	cmp	r3, #0
 8001190:	d044      	beq.n	800121c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	2b01      	cmp	r3, #1
 8001198:	d107      	bne.n	80011aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800119a:	4b47      	ldr	r3, [pc, #284]	; (80012b8 <HAL_RCC_ClockConfig+0x1bc>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d119      	bne.n	80011da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e07f      	b.n	80012aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d003      	beq.n	80011ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011b6:	2b03      	cmp	r3, #3
 80011b8:	d107      	bne.n	80011ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011ba:	4b3f      	ldr	r3, [pc, #252]	; (80012b8 <HAL_RCC_ClockConfig+0x1bc>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d109      	bne.n	80011da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e06f      	b.n	80012aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ca:	4b3b      	ldr	r3, [pc, #236]	; (80012b8 <HAL_RCC_ClockConfig+0x1bc>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0302 	and.w	r3, r3, #2
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d101      	bne.n	80011da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e067      	b.n	80012aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011da:	4b37      	ldr	r3, [pc, #220]	; (80012b8 <HAL_RCC_ClockConfig+0x1bc>)
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	f023 0203 	bic.w	r2, r3, #3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	4934      	ldr	r1, [pc, #208]	; (80012b8 <HAL_RCC_ClockConfig+0x1bc>)
 80011e8:	4313      	orrs	r3, r2
 80011ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011ec:	f7ff fcc2 	bl	8000b74 <HAL_GetTick>
 80011f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011f2:	e00a      	b.n	800120a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011f4:	f7ff fcbe 	bl	8000b74 <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001202:	4293      	cmp	r3, r2
 8001204:	d901      	bls.n	800120a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001206:	2303      	movs	r3, #3
 8001208:	e04f      	b.n	80012aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800120a:	4b2b      	ldr	r3, [pc, #172]	; (80012b8 <HAL_RCC_ClockConfig+0x1bc>)
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	f003 020c 	and.w	r2, r3, #12
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	429a      	cmp	r2, r3
 800121a:	d1eb      	bne.n	80011f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800121c:	4b25      	ldr	r3, [pc, #148]	; (80012b4 <HAL_RCC_ClockConfig+0x1b8>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 030f 	and.w	r3, r3, #15
 8001224:	683a      	ldr	r2, [r7, #0]
 8001226:	429a      	cmp	r2, r3
 8001228:	d20c      	bcs.n	8001244 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800122a:	4b22      	ldr	r3, [pc, #136]	; (80012b4 <HAL_RCC_ClockConfig+0x1b8>)
 800122c:	683a      	ldr	r2, [r7, #0]
 800122e:	b2d2      	uxtb	r2, r2
 8001230:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001232:	4b20      	ldr	r3, [pc, #128]	; (80012b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 030f 	and.w	r3, r3, #15
 800123a:	683a      	ldr	r2, [r7, #0]
 800123c:	429a      	cmp	r2, r3
 800123e:	d001      	beq.n	8001244 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001240:	2301      	movs	r3, #1
 8001242:	e032      	b.n	80012aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 0304 	and.w	r3, r3, #4
 800124c:	2b00      	cmp	r3, #0
 800124e:	d008      	beq.n	8001262 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001250:	4b19      	ldr	r3, [pc, #100]	; (80012b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	4916      	ldr	r1, [pc, #88]	; (80012b8 <HAL_RCC_ClockConfig+0x1bc>)
 800125e:	4313      	orrs	r3, r2
 8001260:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0308 	and.w	r3, r3, #8
 800126a:	2b00      	cmp	r3, #0
 800126c:	d009      	beq.n	8001282 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800126e:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	691b      	ldr	r3, [r3, #16]
 800127a:	00db      	lsls	r3, r3, #3
 800127c:	490e      	ldr	r1, [pc, #56]	; (80012b8 <HAL_RCC_ClockConfig+0x1bc>)
 800127e:	4313      	orrs	r3, r2
 8001280:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001282:	f000 f855 	bl	8001330 <HAL_RCC_GetSysClockFreq>
 8001286:	4602      	mov	r2, r0
 8001288:	4b0b      	ldr	r3, [pc, #44]	; (80012b8 <HAL_RCC_ClockConfig+0x1bc>)
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	091b      	lsrs	r3, r3, #4
 800128e:	f003 030f 	and.w	r3, r3, #15
 8001292:	490a      	ldr	r1, [pc, #40]	; (80012bc <HAL_RCC_ClockConfig+0x1c0>)
 8001294:	5ccb      	ldrb	r3, [r1, r3]
 8001296:	fa22 f303 	lsr.w	r3, r2, r3
 800129a:	4a09      	ldr	r2, [pc, #36]	; (80012c0 <HAL_RCC_ClockConfig+0x1c4>)
 800129c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800129e:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <HAL_RCC_ClockConfig+0x1c8>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff fc22 	bl	8000aec <HAL_InitTick>

  return HAL_OK;
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40023c00 	.word	0x40023c00
 80012b8:	40023800 	.word	0x40023800
 80012bc:	08002cd8 	.word	0x08002cd8
 80012c0:	20000000 	.word	0x20000000
 80012c4:	20000004 	.word	0x20000004

080012c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012cc:	4b03      	ldr	r3, [pc, #12]	; (80012dc <HAL_RCC_GetHCLKFreq+0x14>)
 80012ce:	681b      	ldr	r3, [r3, #0]
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	20000000 	.word	0x20000000

080012e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80012e4:	f7ff fff0 	bl	80012c8 <HAL_RCC_GetHCLKFreq>
 80012e8:	4602      	mov	r2, r0
 80012ea:	4b05      	ldr	r3, [pc, #20]	; (8001300 <HAL_RCC_GetPCLK1Freq+0x20>)
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	0a9b      	lsrs	r3, r3, #10
 80012f0:	f003 0307 	and.w	r3, r3, #7
 80012f4:	4903      	ldr	r1, [pc, #12]	; (8001304 <HAL_RCC_GetPCLK1Freq+0x24>)
 80012f6:	5ccb      	ldrb	r3, [r1, r3]
 80012f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40023800 	.word	0x40023800
 8001304:	08002ce8 	.word	0x08002ce8

08001308 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800130c:	f7ff ffdc 	bl	80012c8 <HAL_RCC_GetHCLKFreq>
 8001310:	4602      	mov	r2, r0
 8001312:	4b05      	ldr	r3, [pc, #20]	; (8001328 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	0b5b      	lsrs	r3, r3, #13
 8001318:	f003 0307 	and.w	r3, r3, #7
 800131c:	4903      	ldr	r1, [pc, #12]	; (800132c <HAL_RCC_GetPCLK2Freq+0x24>)
 800131e:	5ccb      	ldrb	r3, [r1, r3]
 8001320:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001324:	4618      	mov	r0, r3
 8001326:	bd80      	pop	{r7, pc}
 8001328:	40023800 	.word	0x40023800
 800132c:	08002ce8 	.word	0x08002ce8

08001330 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001330:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001334:	b0ae      	sub	sp, #184	; 0xb8
 8001336:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001338:	2300      	movs	r3, #0
 800133a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800133e:	2300      	movs	r3, #0
 8001340:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001344:	2300      	movs	r3, #0
 8001346:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800134a:	2300      	movs	r3, #0
 800134c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001350:	2300      	movs	r3, #0
 8001352:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001356:	4bcb      	ldr	r3, [pc, #812]	; (8001684 <HAL_RCC_GetSysClockFreq+0x354>)
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	f003 030c 	and.w	r3, r3, #12
 800135e:	2b0c      	cmp	r3, #12
 8001360:	f200 8206 	bhi.w	8001770 <HAL_RCC_GetSysClockFreq+0x440>
 8001364:	a201      	add	r2, pc, #4	; (adr r2, 800136c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800136a:	bf00      	nop
 800136c:	080013a1 	.word	0x080013a1
 8001370:	08001771 	.word	0x08001771
 8001374:	08001771 	.word	0x08001771
 8001378:	08001771 	.word	0x08001771
 800137c:	080013a9 	.word	0x080013a9
 8001380:	08001771 	.word	0x08001771
 8001384:	08001771 	.word	0x08001771
 8001388:	08001771 	.word	0x08001771
 800138c:	080013b1 	.word	0x080013b1
 8001390:	08001771 	.word	0x08001771
 8001394:	08001771 	.word	0x08001771
 8001398:	08001771 	.word	0x08001771
 800139c:	080015a1 	.word	0x080015a1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80013a0:	4bb9      	ldr	r3, [pc, #740]	; (8001688 <HAL_RCC_GetSysClockFreq+0x358>)
 80013a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80013a6:	e1e7      	b.n	8001778 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80013a8:	4bb8      	ldr	r3, [pc, #736]	; (800168c <HAL_RCC_GetSysClockFreq+0x35c>)
 80013aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80013ae:	e1e3      	b.n	8001778 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013b0:	4bb4      	ldr	r3, [pc, #720]	; (8001684 <HAL_RCC_GetSysClockFreq+0x354>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80013b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013bc:	4bb1      	ldr	r3, [pc, #708]	; (8001684 <HAL_RCC_GetSysClockFreq+0x354>)
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d071      	beq.n	80014ac <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013c8:	4bae      	ldr	r3, [pc, #696]	; (8001684 <HAL_RCC_GetSysClockFreq+0x354>)
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	099b      	lsrs	r3, r3, #6
 80013ce:	2200      	movs	r2, #0
 80013d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80013d4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80013d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80013dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80013e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80013e4:	2300      	movs	r3, #0
 80013e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80013ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80013ee:	4622      	mov	r2, r4
 80013f0:	462b      	mov	r3, r5
 80013f2:	f04f 0000 	mov.w	r0, #0
 80013f6:	f04f 0100 	mov.w	r1, #0
 80013fa:	0159      	lsls	r1, r3, #5
 80013fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001400:	0150      	lsls	r0, r2, #5
 8001402:	4602      	mov	r2, r0
 8001404:	460b      	mov	r3, r1
 8001406:	4621      	mov	r1, r4
 8001408:	1a51      	subs	r1, r2, r1
 800140a:	6439      	str	r1, [r7, #64]	; 0x40
 800140c:	4629      	mov	r1, r5
 800140e:	eb63 0301 	sbc.w	r3, r3, r1
 8001412:	647b      	str	r3, [r7, #68]	; 0x44
 8001414:	f04f 0200 	mov.w	r2, #0
 8001418:	f04f 0300 	mov.w	r3, #0
 800141c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001420:	4649      	mov	r1, r9
 8001422:	018b      	lsls	r3, r1, #6
 8001424:	4641      	mov	r1, r8
 8001426:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800142a:	4641      	mov	r1, r8
 800142c:	018a      	lsls	r2, r1, #6
 800142e:	4641      	mov	r1, r8
 8001430:	1a51      	subs	r1, r2, r1
 8001432:	63b9      	str	r1, [r7, #56]	; 0x38
 8001434:	4649      	mov	r1, r9
 8001436:	eb63 0301 	sbc.w	r3, r3, r1
 800143a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800143c:	f04f 0200 	mov.w	r2, #0
 8001440:	f04f 0300 	mov.w	r3, #0
 8001444:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001448:	4649      	mov	r1, r9
 800144a:	00cb      	lsls	r3, r1, #3
 800144c:	4641      	mov	r1, r8
 800144e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001452:	4641      	mov	r1, r8
 8001454:	00ca      	lsls	r2, r1, #3
 8001456:	4610      	mov	r0, r2
 8001458:	4619      	mov	r1, r3
 800145a:	4603      	mov	r3, r0
 800145c:	4622      	mov	r2, r4
 800145e:	189b      	adds	r3, r3, r2
 8001460:	633b      	str	r3, [r7, #48]	; 0x30
 8001462:	462b      	mov	r3, r5
 8001464:	460a      	mov	r2, r1
 8001466:	eb42 0303 	adc.w	r3, r2, r3
 800146a:	637b      	str	r3, [r7, #52]	; 0x34
 800146c:	f04f 0200 	mov.w	r2, #0
 8001470:	f04f 0300 	mov.w	r3, #0
 8001474:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001478:	4629      	mov	r1, r5
 800147a:	024b      	lsls	r3, r1, #9
 800147c:	4621      	mov	r1, r4
 800147e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001482:	4621      	mov	r1, r4
 8001484:	024a      	lsls	r2, r1, #9
 8001486:	4610      	mov	r0, r2
 8001488:	4619      	mov	r1, r3
 800148a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800148e:	2200      	movs	r2, #0
 8001490:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001494:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001498:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800149c:	f7fe feb2 	bl	8000204 <__aeabi_uldivmod>
 80014a0:	4602      	mov	r2, r0
 80014a2:	460b      	mov	r3, r1
 80014a4:	4613      	mov	r3, r2
 80014a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80014aa:	e067      	b.n	800157c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014ac:	4b75      	ldr	r3, [pc, #468]	; (8001684 <HAL_RCC_GetSysClockFreq+0x354>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	099b      	lsrs	r3, r3, #6
 80014b2:	2200      	movs	r2, #0
 80014b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80014b8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80014bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80014c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80014c6:	2300      	movs	r3, #0
 80014c8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80014ca:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80014ce:	4622      	mov	r2, r4
 80014d0:	462b      	mov	r3, r5
 80014d2:	f04f 0000 	mov.w	r0, #0
 80014d6:	f04f 0100 	mov.w	r1, #0
 80014da:	0159      	lsls	r1, r3, #5
 80014dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80014e0:	0150      	lsls	r0, r2, #5
 80014e2:	4602      	mov	r2, r0
 80014e4:	460b      	mov	r3, r1
 80014e6:	4621      	mov	r1, r4
 80014e8:	1a51      	subs	r1, r2, r1
 80014ea:	62b9      	str	r1, [r7, #40]	; 0x28
 80014ec:	4629      	mov	r1, r5
 80014ee:	eb63 0301 	sbc.w	r3, r3, r1
 80014f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014f4:	f04f 0200 	mov.w	r2, #0
 80014f8:	f04f 0300 	mov.w	r3, #0
 80014fc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001500:	4649      	mov	r1, r9
 8001502:	018b      	lsls	r3, r1, #6
 8001504:	4641      	mov	r1, r8
 8001506:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800150a:	4641      	mov	r1, r8
 800150c:	018a      	lsls	r2, r1, #6
 800150e:	4641      	mov	r1, r8
 8001510:	ebb2 0a01 	subs.w	sl, r2, r1
 8001514:	4649      	mov	r1, r9
 8001516:	eb63 0b01 	sbc.w	fp, r3, r1
 800151a:	f04f 0200 	mov.w	r2, #0
 800151e:	f04f 0300 	mov.w	r3, #0
 8001522:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001526:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800152a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800152e:	4692      	mov	sl, r2
 8001530:	469b      	mov	fp, r3
 8001532:	4623      	mov	r3, r4
 8001534:	eb1a 0303 	adds.w	r3, sl, r3
 8001538:	623b      	str	r3, [r7, #32]
 800153a:	462b      	mov	r3, r5
 800153c:	eb4b 0303 	adc.w	r3, fp, r3
 8001540:	627b      	str	r3, [r7, #36]	; 0x24
 8001542:	f04f 0200 	mov.w	r2, #0
 8001546:	f04f 0300 	mov.w	r3, #0
 800154a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800154e:	4629      	mov	r1, r5
 8001550:	028b      	lsls	r3, r1, #10
 8001552:	4621      	mov	r1, r4
 8001554:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001558:	4621      	mov	r1, r4
 800155a:	028a      	lsls	r2, r1, #10
 800155c:	4610      	mov	r0, r2
 800155e:	4619      	mov	r1, r3
 8001560:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001564:	2200      	movs	r2, #0
 8001566:	673b      	str	r3, [r7, #112]	; 0x70
 8001568:	677a      	str	r2, [r7, #116]	; 0x74
 800156a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800156e:	f7fe fe49 	bl	8000204 <__aeabi_uldivmod>
 8001572:	4602      	mov	r2, r0
 8001574:	460b      	mov	r3, r1
 8001576:	4613      	mov	r3, r2
 8001578:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800157c:	4b41      	ldr	r3, [pc, #260]	; (8001684 <HAL_RCC_GetSysClockFreq+0x354>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	0c1b      	lsrs	r3, r3, #16
 8001582:	f003 0303 	and.w	r3, r3, #3
 8001586:	3301      	adds	r3, #1
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800158e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001592:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001596:	fbb2 f3f3 	udiv	r3, r2, r3
 800159a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800159e:	e0eb      	b.n	8001778 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015a0:	4b38      	ldr	r3, [pc, #224]	; (8001684 <HAL_RCC_GetSysClockFreq+0x354>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015ac:	4b35      	ldr	r3, [pc, #212]	; (8001684 <HAL_RCC_GetSysClockFreq+0x354>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d06b      	beq.n	8001690 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015b8:	4b32      	ldr	r3, [pc, #200]	; (8001684 <HAL_RCC_GetSysClockFreq+0x354>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	099b      	lsrs	r3, r3, #6
 80015be:	2200      	movs	r2, #0
 80015c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80015c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80015c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80015c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015ca:	663b      	str	r3, [r7, #96]	; 0x60
 80015cc:	2300      	movs	r3, #0
 80015ce:	667b      	str	r3, [r7, #100]	; 0x64
 80015d0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80015d4:	4622      	mov	r2, r4
 80015d6:	462b      	mov	r3, r5
 80015d8:	f04f 0000 	mov.w	r0, #0
 80015dc:	f04f 0100 	mov.w	r1, #0
 80015e0:	0159      	lsls	r1, r3, #5
 80015e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015e6:	0150      	lsls	r0, r2, #5
 80015e8:	4602      	mov	r2, r0
 80015ea:	460b      	mov	r3, r1
 80015ec:	4621      	mov	r1, r4
 80015ee:	1a51      	subs	r1, r2, r1
 80015f0:	61b9      	str	r1, [r7, #24]
 80015f2:	4629      	mov	r1, r5
 80015f4:	eb63 0301 	sbc.w	r3, r3, r1
 80015f8:	61fb      	str	r3, [r7, #28]
 80015fa:	f04f 0200 	mov.w	r2, #0
 80015fe:	f04f 0300 	mov.w	r3, #0
 8001602:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001606:	4659      	mov	r1, fp
 8001608:	018b      	lsls	r3, r1, #6
 800160a:	4651      	mov	r1, sl
 800160c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001610:	4651      	mov	r1, sl
 8001612:	018a      	lsls	r2, r1, #6
 8001614:	4651      	mov	r1, sl
 8001616:	ebb2 0801 	subs.w	r8, r2, r1
 800161a:	4659      	mov	r1, fp
 800161c:	eb63 0901 	sbc.w	r9, r3, r1
 8001620:	f04f 0200 	mov.w	r2, #0
 8001624:	f04f 0300 	mov.w	r3, #0
 8001628:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800162c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001630:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001634:	4690      	mov	r8, r2
 8001636:	4699      	mov	r9, r3
 8001638:	4623      	mov	r3, r4
 800163a:	eb18 0303 	adds.w	r3, r8, r3
 800163e:	613b      	str	r3, [r7, #16]
 8001640:	462b      	mov	r3, r5
 8001642:	eb49 0303 	adc.w	r3, r9, r3
 8001646:	617b      	str	r3, [r7, #20]
 8001648:	f04f 0200 	mov.w	r2, #0
 800164c:	f04f 0300 	mov.w	r3, #0
 8001650:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001654:	4629      	mov	r1, r5
 8001656:	024b      	lsls	r3, r1, #9
 8001658:	4621      	mov	r1, r4
 800165a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800165e:	4621      	mov	r1, r4
 8001660:	024a      	lsls	r2, r1, #9
 8001662:	4610      	mov	r0, r2
 8001664:	4619      	mov	r1, r3
 8001666:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800166a:	2200      	movs	r2, #0
 800166c:	65bb      	str	r3, [r7, #88]	; 0x58
 800166e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001670:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001674:	f7fe fdc6 	bl	8000204 <__aeabi_uldivmod>
 8001678:	4602      	mov	r2, r0
 800167a:	460b      	mov	r3, r1
 800167c:	4613      	mov	r3, r2
 800167e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001682:	e065      	b.n	8001750 <HAL_RCC_GetSysClockFreq+0x420>
 8001684:	40023800 	.word	0x40023800
 8001688:	00f42400 	.word	0x00f42400
 800168c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001690:	4b3d      	ldr	r3, [pc, #244]	; (8001788 <HAL_RCC_GetSysClockFreq+0x458>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	099b      	lsrs	r3, r3, #6
 8001696:	2200      	movs	r2, #0
 8001698:	4618      	mov	r0, r3
 800169a:	4611      	mov	r1, r2
 800169c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80016a0:	653b      	str	r3, [r7, #80]	; 0x50
 80016a2:	2300      	movs	r3, #0
 80016a4:	657b      	str	r3, [r7, #84]	; 0x54
 80016a6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80016aa:	4642      	mov	r2, r8
 80016ac:	464b      	mov	r3, r9
 80016ae:	f04f 0000 	mov.w	r0, #0
 80016b2:	f04f 0100 	mov.w	r1, #0
 80016b6:	0159      	lsls	r1, r3, #5
 80016b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016bc:	0150      	lsls	r0, r2, #5
 80016be:	4602      	mov	r2, r0
 80016c0:	460b      	mov	r3, r1
 80016c2:	4641      	mov	r1, r8
 80016c4:	1a51      	subs	r1, r2, r1
 80016c6:	60b9      	str	r1, [r7, #8]
 80016c8:	4649      	mov	r1, r9
 80016ca:	eb63 0301 	sbc.w	r3, r3, r1
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	f04f 0200 	mov.w	r2, #0
 80016d4:	f04f 0300 	mov.w	r3, #0
 80016d8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80016dc:	4659      	mov	r1, fp
 80016de:	018b      	lsls	r3, r1, #6
 80016e0:	4651      	mov	r1, sl
 80016e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016e6:	4651      	mov	r1, sl
 80016e8:	018a      	lsls	r2, r1, #6
 80016ea:	4651      	mov	r1, sl
 80016ec:	1a54      	subs	r4, r2, r1
 80016ee:	4659      	mov	r1, fp
 80016f0:	eb63 0501 	sbc.w	r5, r3, r1
 80016f4:	f04f 0200 	mov.w	r2, #0
 80016f8:	f04f 0300 	mov.w	r3, #0
 80016fc:	00eb      	lsls	r3, r5, #3
 80016fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001702:	00e2      	lsls	r2, r4, #3
 8001704:	4614      	mov	r4, r2
 8001706:	461d      	mov	r5, r3
 8001708:	4643      	mov	r3, r8
 800170a:	18e3      	adds	r3, r4, r3
 800170c:	603b      	str	r3, [r7, #0]
 800170e:	464b      	mov	r3, r9
 8001710:	eb45 0303 	adc.w	r3, r5, r3
 8001714:	607b      	str	r3, [r7, #4]
 8001716:	f04f 0200 	mov.w	r2, #0
 800171a:	f04f 0300 	mov.w	r3, #0
 800171e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001722:	4629      	mov	r1, r5
 8001724:	028b      	lsls	r3, r1, #10
 8001726:	4621      	mov	r1, r4
 8001728:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800172c:	4621      	mov	r1, r4
 800172e:	028a      	lsls	r2, r1, #10
 8001730:	4610      	mov	r0, r2
 8001732:	4619      	mov	r1, r3
 8001734:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001738:	2200      	movs	r2, #0
 800173a:	64bb      	str	r3, [r7, #72]	; 0x48
 800173c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800173e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001742:	f7fe fd5f 	bl	8000204 <__aeabi_uldivmod>
 8001746:	4602      	mov	r2, r0
 8001748:	460b      	mov	r3, r1
 800174a:	4613      	mov	r3, r2
 800174c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001750:	4b0d      	ldr	r3, [pc, #52]	; (8001788 <HAL_RCC_GetSysClockFreq+0x458>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	0f1b      	lsrs	r3, r3, #28
 8001756:	f003 0307 	and.w	r3, r3, #7
 800175a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800175e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001762:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001766:	fbb2 f3f3 	udiv	r3, r2, r3
 800176a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800176e:	e003      	b.n	8001778 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001770:	4b06      	ldr	r3, [pc, #24]	; (800178c <HAL_RCC_GetSysClockFreq+0x45c>)
 8001772:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001776:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001778:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800177c:	4618      	mov	r0, r3
 800177e:	37b8      	adds	r7, #184	; 0xb8
 8001780:	46bd      	mov	sp, r7
 8001782:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001786:	bf00      	nop
 8001788:	40023800 	.word	0x40023800
 800178c:	00f42400 	.word	0x00f42400

08001790 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d101      	bne.n	80017a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e28d      	b.n	8001cbe <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	f000 8083 	beq.w	80018b6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80017b0:	4b94      	ldr	r3, [pc, #592]	; (8001a04 <HAL_RCC_OscConfig+0x274>)
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	f003 030c 	and.w	r3, r3, #12
 80017b8:	2b04      	cmp	r3, #4
 80017ba:	d019      	beq.n	80017f0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80017bc:	4b91      	ldr	r3, [pc, #580]	; (8001a04 <HAL_RCC_OscConfig+0x274>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80017c4:	2b08      	cmp	r3, #8
 80017c6:	d106      	bne.n	80017d6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80017c8:	4b8e      	ldr	r3, [pc, #568]	; (8001a04 <HAL_RCC_OscConfig+0x274>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017d4:	d00c      	beq.n	80017f0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017d6:	4b8b      	ldr	r3, [pc, #556]	; (8001a04 <HAL_RCC_OscConfig+0x274>)
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80017de:	2b0c      	cmp	r3, #12
 80017e0:	d112      	bne.n	8001808 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017e2:	4b88      	ldr	r3, [pc, #544]	; (8001a04 <HAL_RCC_OscConfig+0x274>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017ee:	d10b      	bne.n	8001808 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017f0:	4b84      	ldr	r3, [pc, #528]	; (8001a04 <HAL_RCC_OscConfig+0x274>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d05b      	beq.n	80018b4 <HAL_RCC_OscConfig+0x124>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d157      	bne.n	80018b4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e25a      	b.n	8001cbe <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001810:	d106      	bne.n	8001820 <HAL_RCC_OscConfig+0x90>
 8001812:	4b7c      	ldr	r3, [pc, #496]	; (8001a04 <HAL_RCC_OscConfig+0x274>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a7b      	ldr	r2, [pc, #492]	; (8001a04 <HAL_RCC_OscConfig+0x274>)
 8001818:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800181c:	6013      	str	r3, [r2, #0]
 800181e:	e01d      	b.n	800185c <HAL_RCC_OscConfig+0xcc>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001828:	d10c      	bne.n	8001844 <HAL_RCC_OscConfig+0xb4>
 800182a:	4b76      	ldr	r3, [pc, #472]	; (8001a04 <HAL_RCC_OscConfig+0x274>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a75      	ldr	r2, [pc, #468]	; (8001a04 <HAL_RCC_OscConfig+0x274>)
 8001830:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001834:	6013      	str	r3, [r2, #0]
 8001836:	4b73      	ldr	r3, [pc, #460]	; (8001a04 <HAL_RCC_OscConfig+0x274>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a72      	ldr	r2, [pc, #456]	; (8001a04 <HAL_RCC_OscConfig+0x274>)
 800183c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001840:	6013      	str	r3, [r2, #0]
 8001842:	e00b      	b.n	800185c <HAL_RCC_OscConfig+0xcc>
 8001844:	4b6f      	ldr	r3, [pc, #444]	; (8001a04 <HAL_RCC_OscConfig+0x274>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a6e      	ldr	r2, [pc, #440]	; (8001a04 <HAL_RCC_OscConfig+0x274>)
 800184a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800184e:	6013      	str	r3, [r2, #0]
 8001850:	4b6c      	ldr	r3, [pc, #432]	; (8001a04 <HAL_RCC_OscConfig+0x274>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a6b      	ldr	r2, [pc, #428]	; (8001a04 <HAL_RCC_OscConfig+0x274>)
 8001856:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800185a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d013      	beq.n	800188c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001864:	f7ff f986 	bl	8000b74 <HAL_GetTick>
 8001868:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800186a:	e008      	b.n	800187e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800186c:	f7ff f982 	bl	8000b74 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b64      	cmp	r3, #100	; 0x64
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e21f      	b.n	8001cbe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800187e:	4b61      	ldr	r3, [pc, #388]	; (8001a04 <HAL_RCC_OscConfig+0x274>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d0f0      	beq.n	800186c <HAL_RCC_OscConfig+0xdc>
 800188a:	e014      	b.n	80018b6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800188c:	f7ff f972 	bl	8000b74 <HAL_GetTick>
 8001890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001892:	e008      	b.n	80018a6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001894:	f7ff f96e 	bl	8000b74 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b64      	cmp	r3, #100	; 0x64
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e20b      	b.n	8001cbe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018a6:	4b57      	ldr	r3, [pc, #348]	; (8001a04 <HAL_RCC_OscConfig+0x274>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1f0      	bne.n	8001894 <HAL_RCC_OscConfig+0x104>
 80018b2:	e000      	b.n	80018b6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d06f      	beq.n	80019a2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80018c2:	4b50      	ldr	r3, [pc, #320]	; (8001a04 <HAL_RCC_OscConfig+0x274>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f003 030c 	and.w	r3, r3, #12
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d017      	beq.n	80018fe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80018ce:	4b4d      	ldr	r3, [pc, #308]	; (8001a04 <HAL_RCC_OscConfig+0x274>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80018d6:	2b08      	cmp	r3, #8
 80018d8:	d105      	bne.n	80018e6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80018da:	4b4a      	ldr	r3, [pc, #296]	; (8001a04 <HAL_RCC_OscConfig+0x274>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d00b      	beq.n	80018fe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018e6:	4b47      	ldr	r3, [pc, #284]	; (8001a04 <HAL_RCC_OscConfig+0x274>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80018ee:	2b0c      	cmp	r3, #12
 80018f0:	d11c      	bne.n	800192c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018f2:	4b44      	ldr	r3, [pc, #272]	; (8001a04 <HAL_RCC_OscConfig+0x274>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d116      	bne.n	800192c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018fe:	4b41      	ldr	r3, [pc, #260]	; (8001a04 <HAL_RCC_OscConfig+0x274>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d005      	beq.n	8001916 <HAL_RCC_OscConfig+0x186>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d001      	beq.n	8001916 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e1d3      	b.n	8001cbe <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001916:	4b3b      	ldr	r3, [pc, #236]	; (8001a04 <HAL_RCC_OscConfig+0x274>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	691b      	ldr	r3, [r3, #16]
 8001922:	00db      	lsls	r3, r3, #3
 8001924:	4937      	ldr	r1, [pc, #220]	; (8001a04 <HAL_RCC_OscConfig+0x274>)
 8001926:	4313      	orrs	r3, r2
 8001928:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800192a:	e03a      	b.n	80019a2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d020      	beq.n	8001976 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001934:	4b34      	ldr	r3, [pc, #208]	; (8001a08 <HAL_RCC_OscConfig+0x278>)
 8001936:	2201      	movs	r2, #1
 8001938:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800193a:	f7ff f91b 	bl	8000b74 <HAL_GetTick>
 800193e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001940:	e008      	b.n	8001954 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001942:	f7ff f917 	bl	8000b74 <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d901      	bls.n	8001954 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e1b4      	b.n	8001cbe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001954:	4b2b      	ldr	r3, [pc, #172]	; (8001a04 <HAL_RCC_OscConfig+0x274>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d0f0      	beq.n	8001942 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001960:	4b28      	ldr	r3, [pc, #160]	; (8001a04 <HAL_RCC_OscConfig+0x274>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	691b      	ldr	r3, [r3, #16]
 800196c:	00db      	lsls	r3, r3, #3
 800196e:	4925      	ldr	r1, [pc, #148]	; (8001a04 <HAL_RCC_OscConfig+0x274>)
 8001970:	4313      	orrs	r3, r2
 8001972:	600b      	str	r3, [r1, #0]
 8001974:	e015      	b.n	80019a2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001976:	4b24      	ldr	r3, [pc, #144]	; (8001a08 <HAL_RCC_OscConfig+0x278>)
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800197c:	f7ff f8fa 	bl	8000b74 <HAL_GetTick>
 8001980:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001982:	e008      	b.n	8001996 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001984:	f7ff f8f6 	bl	8000b74 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b02      	cmp	r3, #2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e193      	b.n	8001cbe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001996:	4b1b      	ldr	r3, [pc, #108]	; (8001a04 <HAL_RCC_OscConfig+0x274>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d1f0      	bne.n	8001984 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0308 	and.w	r3, r3, #8
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d036      	beq.n	8001a1c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	695b      	ldr	r3, [r3, #20]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d016      	beq.n	80019e4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019b6:	4b15      	ldr	r3, [pc, #84]	; (8001a0c <HAL_RCC_OscConfig+0x27c>)
 80019b8:	2201      	movs	r2, #1
 80019ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019bc:	f7ff f8da 	bl	8000b74 <HAL_GetTick>
 80019c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019c4:	f7ff f8d6 	bl	8000b74 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e173      	b.n	8001cbe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019d6:	4b0b      	ldr	r3, [pc, #44]	; (8001a04 <HAL_RCC_OscConfig+0x274>)
 80019d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d0f0      	beq.n	80019c4 <HAL_RCC_OscConfig+0x234>
 80019e2:	e01b      	b.n	8001a1c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019e4:	4b09      	ldr	r3, [pc, #36]	; (8001a0c <HAL_RCC_OscConfig+0x27c>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ea:	f7ff f8c3 	bl	8000b74 <HAL_GetTick>
 80019ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019f0:	e00e      	b.n	8001a10 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019f2:	f7ff f8bf 	bl	8000b74 <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d907      	bls.n	8001a10 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	e15c      	b.n	8001cbe <HAL_RCC_OscConfig+0x52e>
 8001a04:	40023800 	.word	0x40023800
 8001a08:	42470000 	.word	0x42470000
 8001a0c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a10:	4b8a      	ldr	r3, [pc, #552]	; (8001c3c <HAL_RCC_OscConfig+0x4ac>)
 8001a12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a14:	f003 0302 	and.w	r3, r3, #2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d1ea      	bne.n	80019f2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0304 	and.w	r3, r3, #4
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	f000 8097 	beq.w	8001b58 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a2e:	4b83      	ldr	r3, [pc, #524]	; (8001c3c <HAL_RCC_OscConfig+0x4ac>)
 8001a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d10f      	bne.n	8001a5a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	60bb      	str	r3, [r7, #8]
 8001a3e:	4b7f      	ldr	r3, [pc, #508]	; (8001c3c <HAL_RCC_OscConfig+0x4ac>)
 8001a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a42:	4a7e      	ldr	r2, [pc, #504]	; (8001c3c <HAL_RCC_OscConfig+0x4ac>)
 8001a44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a48:	6413      	str	r3, [r2, #64]	; 0x40
 8001a4a:	4b7c      	ldr	r3, [pc, #496]	; (8001c3c <HAL_RCC_OscConfig+0x4ac>)
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a52:	60bb      	str	r3, [r7, #8]
 8001a54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a56:	2301      	movs	r3, #1
 8001a58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a5a:	4b79      	ldr	r3, [pc, #484]	; (8001c40 <HAL_RCC_OscConfig+0x4b0>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d118      	bne.n	8001a98 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a66:	4b76      	ldr	r3, [pc, #472]	; (8001c40 <HAL_RCC_OscConfig+0x4b0>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a75      	ldr	r2, [pc, #468]	; (8001c40 <HAL_RCC_OscConfig+0x4b0>)
 8001a6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a72:	f7ff f87f 	bl	8000b74 <HAL_GetTick>
 8001a76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a78:	e008      	b.n	8001a8c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a7a:	f7ff f87b 	bl	8000b74 <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d901      	bls.n	8001a8c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e118      	b.n	8001cbe <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a8c:	4b6c      	ldr	r3, [pc, #432]	; (8001c40 <HAL_RCC_OscConfig+0x4b0>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d0f0      	beq.n	8001a7a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d106      	bne.n	8001aae <HAL_RCC_OscConfig+0x31e>
 8001aa0:	4b66      	ldr	r3, [pc, #408]	; (8001c3c <HAL_RCC_OscConfig+0x4ac>)
 8001aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aa4:	4a65      	ldr	r2, [pc, #404]	; (8001c3c <HAL_RCC_OscConfig+0x4ac>)
 8001aa6:	f043 0301 	orr.w	r3, r3, #1
 8001aaa:	6713      	str	r3, [r2, #112]	; 0x70
 8001aac:	e01c      	b.n	8001ae8 <HAL_RCC_OscConfig+0x358>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	2b05      	cmp	r3, #5
 8001ab4:	d10c      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x340>
 8001ab6:	4b61      	ldr	r3, [pc, #388]	; (8001c3c <HAL_RCC_OscConfig+0x4ac>)
 8001ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aba:	4a60      	ldr	r2, [pc, #384]	; (8001c3c <HAL_RCC_OscConfig+0x4ac>)
 8001abc:	f043 0304 	orr.w	r3, r3, #4
 8001ac0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ac2:	4b5e      	ldr	r3, [pc, #376]	; (8001c3c <HAL_RCC_OscConfig+0x4ac>)
 8001ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ac6:	4a5d      	ldr	r2, [pc, #372]	; (8001c3c <HAL_RCC_OscConfig+0x4ac>)
 8001ac8:	f043 0301 	orr.w	r3, r3, #1
 8001acc:	6713      	str	r3, [r2, #112]	; 0x70
 8001ace:	e00b      	b.n	8001ae8 <HAL_RCC_OscConfig+0x358>
 8001ad0:	4b5a      	ldr	r3, [pc, #360]	; (8001c3c <HAL_RCC_OscConfig+0x4ac>)
 8001ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ad4:	4a59      	ldr	r2, [pc, #356]	; (8001c3c <HAL_RCC_OscConfig+0x4ac>)
 8001ad6:	f023 0301 	bic.w	r3, r3, #1
 8001ada:	6713      	str	r3, [r2, #112]	; 0x70
 8001adc:	4b57      	ldr	r3, [pc, #348]	; (8001c3c <HAL_RCC_OscConfig+0x4ac>)
 8001ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ae0:	4a56      	ldr	r2, [pc, #344]	; (8001c3c <HAL_RCC_OscConfig+0x4ac>)
 8001ae2:	f023 0304 	bic.w	r3, r3, #4
 8001ae6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d015      	beq.n	8001b1c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001af0:	f7ff f840 	bl	8000b74 <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001af6:	e00a      	b.n	8001b0e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001af8:	f7ff f83c 	bl	8000b74 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e0d7      	b.n	8001cbe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b0e:	4b4b      	ldr	r3, [pc, #300]	; (8001c3c <HAL_RCC_OscConfig+0x4ac>)
 8001b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d0ee      	beq.n	8001af8 <HAL_RCC_OscConfig+0x368>
 8001b1a:	e014      	b.n	8001b46 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b1c:	f7ff f82a 	bl	8000b74 <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b22:	e00a      	b.n	8001b3a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b24:	f7ff f826 	bl	8000b74 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e0c1      	b.n	8001cbe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b3a:	4b40      	ldr	r3, [pc, #256]	; (8001c3c <HAL_RCC_OscConfig+0x4ac>)
 8001b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1ee      	bne.n	8001b24 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b46:	7dfb      	ldrb	r3, [r7, #23]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d105      	bne.n	8001b58 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b4c:	4b3b      	ldr	r3, [pc, #236]	; (8001c3c <HAL_RCC_OscConfig+0x4ac>)
 8001b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b50:	4a3a      	ldr	r2, [pc, #232]	; (8001c3c <HAL_RCC_OscConfig+0x4ac>)
 8001b52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b56:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f000 80ad 	beq.w	8001cbc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b62:	4b36      	ldr	r3, [pc, #216]	; (8001c3c <HAL_RCC_OscConfig+0x4ac>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f003 030c 	and.w	r3, r3, #12
 8001b6a:	2b08      	cmp	r3, #8
 8001b6c:	d060      	beq.n	8001c30 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	699b      	ldr	r3, [r3, #24]
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d145      	bne.n	8001c02 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b76:	4b33      	ldr	r3, [pc, #204]	; (8001c44 <HAL_RCC_OscConfig+0x4b4>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b7c:	f7fe fffa 	bl	8000b74 <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b84:	f7fe fff6 	bl	8000b74 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e093      	b.n	8001cbe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b96:	4b29      	ldr	r3, [pc, #164]	; (8001c3c <HAL_RCC_OscConfig+0x4ac>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d1f0      	bne.n	8001b84 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	69da      	ldr	r2, [r3, #28]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a1b      	ldr	r3, [r3, #32]
 8001baa:	431a      	orrs	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb0:	019b      	lsls	r3, r3, #6
 8001bb2:	431a      	orrs	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb8:	085b      	lsrs	r3, r3, #1
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	041b      	lsls	r3, r3, #16
 8001bbe:	431a      	orrs	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc4:	061b      	lsls	r3, r3, #24
 8001bc6:	431a      	orrs	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bcc:	071b      	lsls	r3, r3, #28
 8001bce:	491b      	ldr	r1, [pc, #108]	; (8001c3c <HAL_RCC_OscConfig+0x4ac>)
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bd4:	4b1b      	ldr	r3, [pc, #108]	; (8001c44 <HAL_RCC_OscConfig+0x4b4>)
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bda:	f7fe ffcb 	bl	8000b74 <HAL_GetTick>
 8001bde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001be0:	e008      	b.n	8001bf4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001be2:	f7fe ffc7 	bl	8000b74 <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d901      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e064      	b.n	8001cbe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bf4:	4b11      	ldr	r3, [pc, #68]	; (8001c3c <HAL_RCC_OscConfig+0x4ac>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d0f0      	beq.n	8001be2 <HAL_RCC_OscConfig+0x452>
 8001c00:	e05c      	b.n	8001cbc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c02:	4b10      	ldr	r3, [pc, #64]	; (8001c44 <HAL_RCC_OscConfig+0x4b4>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c08:	f7fe ffb4 	bl	8000b74 <HAL_GetTick>
 8001c0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c0e:	e008      	b.n	8001c22 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c10:	f7fe ffb0 	bl	8000b74 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e04d      	b.n	8001cbe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c22:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <HAL_RCC_OscConfig+0x4ac>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d1f0      	bne.n	8001c10 <HAL_RCC_OscConfig+0x480>
 8001c2e:	e045      	b.n	8001cbc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d107      	bne.n	8001c48 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e040      	b.n	8001cbe <HAL_RCC_OscConfig+0x52e>
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	40007000 	.word	0x40007000
 8001c44:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c48:	4b1f      	ldr	r3, [pc, #124]	; (8001cc8 <HAL_RCC_OscConfig+0x538>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	699b      	ldr	r3, [r3, #24]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d030      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d129      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d122      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c72:	68fa      	ldr	r2, [r7, #12]
 8001c74:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c78:	4013      	ands	r3, r2
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c7e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d119      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c8e:	085b      	lsrs	r3, r3, #1
 8001c90:	3b01      	subs	r3, #1
 8001c92:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d10f      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d107      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d001      	beq.n	8001cbc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e000      	b.n	8001cbe <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3718      	adds	r7, #24
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40023800 	.word	0x40023800

08001ccc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e03f      	b.n	8001d5e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d106      	bne.n	8001cf8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f7fe fd86 	bl	8000804 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2224      	movs	r2, #36	; 0x24
 8001cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	68da      	ldr	r2, [r3, #12]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f000 f829 	bl	8001d68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	691a      	ldr	r2, [r3, #16]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001d24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	695a      	ldr	r2, [r3, #20]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001d34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	68da      	ldr	r2, [r3, #12]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2220      	movs	r2, #32
 8001d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2220      	movs	r2, #32
 8001d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
	...

08001d68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d6c:	b0c0      	sub	sp, #256	; 0x100
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	691b      	ldr	r3, [r3, #16]
 8001d7c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d84:	68d9      	ldr	r1, [r3, #12]
 8001d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	ea40 0301 	orr.w	r3, r0, r1
 8001d90:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001d92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d96:	689a      	ldr	r2, [r3, #8]
 8001d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	431a      	orrs	r2, r3
 8001da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001da4:	695b      	ldr	r3, [r3, #20]
 8001da6:	431a      	orrs	r2, r3
 8001da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001dc0:	f021 010c 	bic.w	r1, r1, #12
 8001dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001dce:	430b      	orrs	r3, r1
 8001dd0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	695b      	ldr	r3, [r3, #20]
 8001dda:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001de2:	6999      	ldr	r1, [r3, #24]
 8001de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	ea40 0301 	orr.w	r3, r0, r1
 8001dee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	4b8f      	ldr	r3, [pc, #572]	; (8002034 <UART_SetConfig+0x2cc>)
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d005      	beq.n	8001e08 <UART_SetConfig+0xa0>
 8001dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	4b8d      	ldr	r3, [pc, #564]	; (8002038 <UART_SetConfig+0x2d0>)
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d104      	bne.n	8001e12 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001e08:	f7ff fa7e 	bl	8001308 <HAL_RCC_GetPCLK2Freq>
 8001e0c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001e10:	e003      	b.n	8001e1a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001e12:	f7ff fa65 	bl	80012e0 <HAL_RCC_GetPCLK1Freq>
 8001e16:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e1e:	69db      	ldr	r3, [r3, #28]
 8001e20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e24:	f040 810c 	bne.w	8002040 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001e28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001e32:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001e36:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001e3a:	4622      	mov	r2, r4
 8001e3c:	462b      	mov	r3, r5
 8001e3e:	1891      	adds	r1, r2, r2
 8001e40:	65b9      	str	r1, [r7, #88]	; 0x58
 8001e42:	415b      	adcs	r3, r3
 8001e44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e46:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001e4a:	4621      	mov	r1, r4
 8001e4c:	eb12 0801 	adds.w	r8, r2, r1
 8001e50:	4629      	mov	r1, r5
 8001e52:	eb43 0901 	adc.w	r9, r3, r1
 8001e56:	f04f 0200 	mov.w	r2, #0
 8001e5a:	f04f 0300 	mov.w	r3, #0
 8001e5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e6a:	4690      	mov	r8, r2
 8001e6c:	4699      	mov	r9, r3
 8001e6e:	4623      	mov	r3, r4
 8001e70:	eb18 0303 	adds.w	r3, r8, r3
 8001e74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001e78:	462b      	mov	r3, r5
 8001e7a:	eb49 0303 	adc.w	r3, r9, r3
 8001e7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001e8e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001e92:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001e96:	460b      	mov	r3, r1
 8001e98:	18db      	adds	r3, r3, r3
 8001e9a:	653b      	str	r3, [r7, #80]	; 0x50
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	eb42 0303 	adc.w	r3, r2, r3
 8001ea2:	657b      	str	r3, [r7, #84]	; 0x54
 8001ea4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001ea8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001eac:	f7fe f9aa 	bl	8000204 <__aeabi_uldivmod>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	4b61      	ldr	r3, [pc, #388]	; (800203c <UART_SetConfig+0x2d4>)
 8001eb6:	fba3 2302 	umull	r2, r3, r3, r2
 8001eba:	095b      	lsrs	r3, r3, #5
 8001ebc:	011c      	lsls	r4, r3, #4
 8001ebe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001ec8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001ecc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001ed0:	4642      	mov	r2, r8
 8001ed2:	464b      	mov	r3, r9
 8001ed4:	1891      	adds	r1, r2, r2
 8001ed6:	64b9      	str	r1, [r7, #72]	; 0x48
 8001ed8:	415b      	adcs	r3, r3
 8001eda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001edc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001ee0:	4641      	mov	r1, r8
 8001ee2:	eb12 0a01 	adds.w	sl, r2, r1
 8001ee6:	4649      	mov	r1, r9
 8001ee8:	eb43 0b01 	adc.w	fp, r3, r1
 8001eec:	f04f 0200 	mov.w	r2, #0
 8001ef0:	f04f 0300 	mov.w	r3, #0
 8001ef4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001ef8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001efc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001f00:	4692      	mov	sl, r2
 8001f02:	469b      	mov	fp, r3
 8001f04:	4643      	mov	r3, r8
 8001f06:	eb1a 0303 	adds.w	r3, sl, r3
 8001f0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001f0e:	464b      	mov	r3, r9
 8001f10:	eb4b 0303 	adc.w	r3, fp, r3
 8001f14:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001f24:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001f28:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	18db      	adds	r3, r3, r3
 8001f30:	643b      	str	r3, [r7, #64]	; 0x40
 8001f32:	4613      	mov	r3, r2
 8001f34:	eb42 0303 	adc.w	r3, r2, r3
 8001f38:	647b      	str	r3, [r7, #68]	; 0x44
 8001f3a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001f3e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001f42:	f7fe f95f 	bl	8000204 <__aeabi_uldivmod>
 8001f46:	4602      	mov	r2, r0
 8001f48:	460b      	mov	r3, r1
 8001f4a:	4611      	mov	r1, r2
 8001f4c:	4b3b      	ldr	r3, [pc, #236]	; (800203c <UART_SetConfig+0x2d4>)
 8001f4e:	fba3 2301 	umull	r2, r3, r3, r1
 8001f52:	095b      	lsrs	r3, r3, #5
 8001f54:	2264      	movs	r2, #100	; 0x64
 8001f56:	fb02 f303 	mul.w	r3, r2, r3
 8001f5a:	1acb      	subs	r3, r1, r3
 8001f5c:	00db      	lsls	r3, r3, #3
 8001f5e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001f62:	4b36      	ldr	r3, [pc, #216]	; (800203c <UART_SetConfig+0x2d4>)
 8001f64:	fba3 2302 	umull	r2, r3, r3, r2
 8001f68:	095b      	lsrs	r3, r3, #5
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001f70:	441c      	add	r4, r3
 8001f72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f76:	2200      	movs	r2, #0
 8001f78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001f7c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001f80:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001f84:	4642      	mov	r2, r8
 8001f86:	464b      	mov	r3, r9
 8001f88:	1891      	adds	r1, r2, r2
 8001f8a:	63b9      	str	r1, [r7, #56]	; 0x38
 8001f8c:	415b      	adcs	r3, r3
 8001f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001f94:	4641      	mov	r1, r8
 8001f96:	1851      	adds	r1, r2, r1
 8001f98:	6339      	str	r1, [r7, #48]	; 0x30
 8001f9a:	4649      	mov	r1, r9
 8001f9c:	414b      	adcs	r3, r1
 8001f9e:	637b      	str	r3, [r7, #52]	; 0x34
 8001fa0:	f04f 0200 	mov.w	r2, #0
 8001fa4:	f04f 0300 	mov.w	r3, #0
 8001fa8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001fac:	4659      	mov	r1, fp
 8001fae:	00cb      	lsls	r3, r1, #3
 8001fb0:	4651      	mov	r1, sl
 8001fb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001fb6:	4651      	mov	r1, sl
 8001fb8:	00ca      	lsls	r2, r1, #3
 8001fba:	4610      	mov	r0, r2
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	4642      	mov	r2, r8
 8001fc2:	189b      	adds	r3, r3, r2
 8001fc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001fc8:	464b      	mov	r3, r9
 8001fca:	460a      	mov	r2, r1
 8001fcc:	eb42 0303 	adc.w	r3, r2, r3
 8001fd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001fe0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001fe4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8001fe8:	460b      	mov	r3, r1
 8001fea:	18db      	adds	r3, r3, r3
 8001fec:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fee:	4613      	mov	r3, r2
 8001ff0:	eb42 0303 	adc.w	r3, r2, r3
 8001ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ff6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ffa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001ffe:	f7fe f901 	bl	8000204 <__aeabi_uldivmod>
 8002002:	4602      	mov	r2, r0
 8002004:	460b      	mov	r3, r1
 8002006:	4b0d      	ldr	r3, [pc, #52]	; (800203c <UART_SetConfig+0x2d4>)
 8002008:	fba3 1302 	umull	r1, r3, r3, r2
 800200c:	095b      	lsrs	r3, r3, #5
 800200e:	2164      	movs	r1, #100	; 0x64
 8002010:	fb01 f303 	mul.w	r3, r1, r3
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	3332      	adds	r3, #50	; 0x32
 800201a:	4a08      	ldr	r2, [pc, #32]	; (800203c <UART_SetConfig+0x2d4>)
 800201c:	fba2 2303 	umull	r2, r3, r2, r3
 8002020:	095b      	lsrs	r3, r3, #5
 8002022:	f003 0207 	and.w	r2, r3, #7
 8002026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4422      	add	r2, r4
 800202e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002030:	e105      	b.n	800223e <UART_SetConfig+0x4d6>
 8002032:	bf00      	nop
 8002034:	40011000 	.word	0x40011000
 8002038:	40011400 	.word	0x40011400
 800203c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002040:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002044:	2200      	movs	r2, #0
 8002046:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800204a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800204e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002052:	4642      	mov	r2, r8
 8002054:	464b      	mov	r3, r9
 8002056:	1891      	adds	r1, r2, r2
 8002058:	6239      	str	r1, [r7, #32]
 800205a:	415b      	adcs	r3, r3
 800205c:	627b      	str	r3, [r7, #36]	; 0x24
 800205e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002062:	4641      	mov	r1, r8
 8002064:	1854      	adds	r4, r2, r1
 8002066:	4649      	mov	r1, r9
 8002068:	eb43 0501 	adc.w	r5, r3, r1
 800206c:	f04f 0200 	mov.w	r2, #0
 8002070:	f04f 0300 	mov.w	r3, #0
 8002074:	00eb      	lsls	r3, r5, #3
 8002076:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800207a:	00e2      	lsls	r2, r4, #3
 800207c:	4614      	mov	r4, r2
 800207e:	461d      	mov	r5, r3
 8002080:	4643      	mov	r3, r8
 8002082:	18e3      	adds	r3, r4, r3
 8002084:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002088:	464b      	mov	r3, r9
 800208a:	eb45 0303 	adc.w	r3, r5, r3
 800208e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800209e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80020a2:	f04f 0200 	mov.w	r2, #0
 80020a6:	f04f 0300 	mov.w	r3, #0
 80020aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80020ae:	4629      	mov	r1, r5
 80020b0:	008b      	lsls	r3, r1, #2
 80020b2:	4621      	mov	r1, r4
 80020b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80020b8:	4621      	mov	r1, r4
 80020ba:	008a      	lsls	r2, r1, #2
 80020bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80020c0:	f7fe f8a0 	bl	8000204 <__aeabi_uldivmod>
 80020c4:	4602      	mov	r2, r0
 80020c6:	460b      	mov	r3, r1
 80020c8:	4b60      	ldr	r3, [pc, #384]	; (800224c <UART_SetConfig+0x4e4>)
 80020ca:	fba3 2302 	umull	r2, r3, r3, r2
 80020ce:	095b      	lsrs	r3, r3, #5
 80020d0:	011c      	lsls	r4, r3, #4
 80020d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80020d6:	2200      	movs	r2, #0
 80020d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80020dc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80020e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80020e4:	4642      	mov	r2, r8
 80020e6:	464b      	mov	r3, r9
 80020e8:	1891      	adds	r1, r2, r2
 80020ea:	61b9      	str	r1, [r7, #24]
 80020ec:	415b      	adcs	r3, r3
 80020ee:	61fb      	str	r3, [r7, #28]
 80020f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020f4:	4641      	mov	r1, r8
 80020f6:	1851      	adds	r1, r2, r1
 80020f8:	6139      	str	r1, [r7, #16]
 80020fa:	4649      	mov	r1, r9
 80020fc:	414b      	adcs	r3, r1
 80020fe:	617b      	str	r3, [r7, #20]
 8002100:	f04f 0200 	mov.w	r2, #0
 8002104:	f04f 0300 	mov.w	r3, #0
 8002108:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800210c:	4659      	mov	r1, fp
 800210e:	00cb      	lsls	r3, r1, #3
 8002110:	4651      	mov	r1, sl
 8002112:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002116:	4651      	mov	r1, sl
 8002118:	00ca      	lsls	r2, r1, #3
 800211a:	4610      	mov	r0, r2
 800211c:	4619      	mov	r1, r3
 800211e:	4603      	mov	r3, r0
 8002120:	4642      	mov	r2, r8
 8002122:	189b      	adds	r3, r3, r2
 8002124:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002128:	464b      	mov	r3, r9
 800212a:	460a      	mov	r2, r1
 800212c:	eb42 0303 	adc.w	r3, r2, r3
 8002130:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	67bb      	str	r3, [r7, #120]	; 0x78
 800213e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002140:	f04f 0200 	mov.w	r2, #0
 8002144:	f04f 0300 	mov.w	r3, #0
 8002148:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800214c:	4649      	mov	r1, r9
 800214e:	008b      	lsls	r3, r1, #2
 8002150:	4641      	mov	r1, r8
 8002152:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002156:	4641      	mov	r1, r8
 8002158:	008a      	lsls	r2, r1, #2
 800215a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800215e:	f7fe f851 	bl	8000204 <__aeabi_uldivmod>
 8002162:	4602      	mov	r2, r0
 8002164:	460b      	mov	r3, r1
 8002166:	4b39      	ldr	r3, [pc, #228]	; (800224c <UART_SetConfig+0x4e4>)
 8002168:	fba3 1302 	umull	r1, r3, r3, r2
 800216c:	095b      	lsrs	r3, r3, #5
 800216e:	2164      	movs	r1, #100	; 0x64
 8002170:	fb01 f303 	mul.w	r3, r1, r3
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	011b      	lsls	r3, r3, #4
 8002178:	3332      	adds	r3, #50	; 0x32
 800217a:	4a34      	ldr	r2, [pc, #208]	; (800224c <UART_SetConfig+0x4e4>)
 800217c:	fba2 2303 	umull	r2, r3, r2, r3
 8002180:	095b      	lsrs	r3, r3, #5
 8002182:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002186:	441c      	add	r4, r3
 8002188:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800218c:	2200      	movs	r2, #0
 800218e:	673b      	str	r3, [r7, #112]	; 0x70
 8002190:	677a      	str	r2, [r7, #116]	; 0x74
 8002192:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002196:	4642      	mov	r2, r8
 8002198:	464b      	mov	r3, r9
 800219a:	1891      	adds	r1, r2, r2
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	415b      	adcs	r3, r3
 80021a0:	60fb      	str	r3, [r7, #12]
 80021a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021a6:	4641      	mov	r1, r8
 80021a8:	1851      	adds	r1, r2, r1
 80021aa:	6039      	str	r1, [r7, #0]
 80021ac:	4649      	mov	r1, r9
 80021ae:	414b      	adcs	r3, r1
 80021b0:	607b      	str	r3, [r7, #4]
 80021b2:	f04f 0200 	mov.w	r2, #0
 80021b6:	f04f 0300 	mov.w	r3, #0
 80021ba:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80021be:	4659      	mov	r1, fp
 80021c0:	00cb      	lsls	r3, r1, #3
 80021c2:	4651      	mov	r1, sl
 80021c4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80021c8:	4651      	mov	r1, sl
 80021ca:	00ca      	lsls	r2, r1, #3
 80021cc:	4610      	mov	r0, r2
 80021ce:	4619      	mov	r1, r3
 80021d0:	4603      	mov	r3, r0
 80021d2:	4642      	mov	r2, r8
 80021d4:	189b      	adds	r3, r3, r2
 80021d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80021d8:	464b      	mov	r3, r9
 80021da:	460a      	mov	r2, r1
 80021dc:	eb42 0303 	adc.w	r3, r2, r3
 80021e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80021e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	663b      	str	r3, [r7, #96]	; 0x60
 80021ec:	667a      	str	r2, [r7, #100]	; 0x64
 80021ee:	f04f 0200 	mov.w	r2, #0
 80021f2:	f04f 0300 	mov.w	r3, #0
 80021f6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80021fa:	4649      	mov	r1, r9
 80021fc:	008b      	lsls	r3, r1, #2
 80021fe:	4641      	mov	r1, r8
 8002200:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002204:	4641      	mov	r1, r8
 8002206:	008a      	lsls	r2, r1, #2
 8002208:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800220c:	f7fd fffa 	bl	8000204 <__aeabi_uldivmod>
 8002210:	4602      	mov	r2, r0
 8002212:	460b      	mov	r3, r1
 8002214:	4b0d      	ldr	r3, [pc, #52]	; (800224c <UART_SetConfig+0x4e4>)
 8002216:	fba3 1302 	umull	r1, r3, r3, r2
 800221a:	095b      	lsrs	r3, r3, #5
 800221c:	2164      	movs	r1, #100	; 0x64
 800221e:	fb01 f303 	mul.w	r3, r1, r3
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	011b      	lsls	r3, r3, #4
 8002226:	3332      	adds	r3, #50	; 0x32
 8002228:	4a08      	ldr	r2, [pc, #32]	; (800224c <UART_SetConfig+0x4e4>)
 800222a:	fba2 2303 	umull	r2, r3, r2, r3
 800222e:	095b      	lsrs	r3, r3, #5
 8002230:	f003 020f 	and.w	r2, r3, #15
 8002234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4422      	add	r2, r4
 800223c:	609a      	str	r2, [r3, #8]
}
 800223e:	bf00      	nop
 8002240:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002244:	46bd      	mov	sp, r7
 8002246:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800224a:	bf00      	nop
 800224c:	51eb851f 	.word	0x51eb851f

08002250 <__errno>:
 8002250:	4b01      	ldr	r3, [pc, #4]	; (8002258 <__errno+0x8>)
 8002252:	6818      	ldr	r0, [r3, #0]
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	2000000c 	.word	0x2000000c

0800225c <__libc_init_array>:
 800225c:	b570      	push	{r4, r5, r6, lr}
 800225e:	4d0d      	ldr	r5, [pc, #52]	; (8002294 <__libc_init_array+0x38>)
 8002260:	4c0d      	ldr	r4, [pc, #52]	; (8002298 <__libc_init_array+0x3c>)
 8002262:	1b64      	subs	r4, r4, r5
 8002264:	10a4      	asrs	r4, r4, #2
 8002266:	2600      	movs	r6, #0
 8002268:	42a6      	cmp	r6, r4
 800226a:	d109      	bne.n	8002280 <__libc_init_array+0x24>
 800226c:	4d0b      	ldr	r5, [pc, #44]	; (800229c <__libc_init_array+0x40>)
 800226e:	4c0c      	ldr	r4, [pc, #48]	; (80022a0 <__libc_init_array+0x44>)
 8002270:	f000 fd1e 	bl	8002cb0 <_init>
 8002274:	1b64      	subs	r4, r4, r5
 8002276:	10a4      	asrs	r4, r4, #2
 8002278:	2600      	movs	r6, #0
 800227a:	42a6      	cmp	r6, r4
 800227c:	d105      	bne.n	800228a <__libc_init_array+0x2e>
 800227e:	bd70      	pop	{r4, r5, r6, pc}
 8002280:	f855 3b04 	ldr.w	r3, [r5], #4
 8002284:	4798      	blx	r3
 8002286:	3601      	adds	r6, #1
 8002288:	e7ee      	b.n	8002268 <__libc_init_array+0xc>
 800228a:	f855 3b04 	ldr.w	r3, [r5], #4
 800228e:	4798      	blx	r3
 8002290:	3601      	adds	r6, #1
 8002292:	e7f2      	b.n	800227a <__libc_init_array+0x1e>
 8002294:	08002d5c 	.word	0x08002d5c
 8002298:	08002d5c 	.word	0x08002d5c
 800229c:	08002d5c 	.word	0x08002d5c
 80022a0:	08002d60 	.word	0x08002d60

080022a4 <memset>:
 80022a4:	4402      	add	r2, r0
 80022a6:	4603      	mov	r3, r0
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d100      	bne.n	80022ae <memset+0xa>
 80022ac:	4770      	bx	lr
 80022ae:	f803 1b01 	strb.w	r1, [r3], #1
 80022b2:	e7f9      	b.n	80022a8 <memset+0x4>

080022b4 <_puts_r>:
 80022b4:	b570      	push	{r4, r5, r6, lr}
 80022b6:	460e      	mov	r6, r1
 80022b8:	4605      	mov	r5, r0
 80022ba:	b118      	cbz	r0, 80022c4 <_puts_r+0x10>
 80022bc:	6983      	ldr	r3, [r0, #24]
 80022be:	b90b      	cbnz	r3, 80022c4 <_puts_r+0x10>
 80022c0:	f000 fa48 	bl	8002754 <__sinit>
 80022c4:	69ab      	ldr	r3, [r5, #24]
 80022c6:	68ac      	ldr	r4, [r5, #8]
 80022c8:	b913      	cbnz	r3, 80022d0 <_puts_r+0x1c>
 80022ca:	4628      	mov	r0, r5
 80022cc:	f000 fa42 	bl	8002754 <__sinit>
 80022d0:	4b2c      	ldr	r3, [pc, #176]	; (8002384 <_puts_r+0xd0>)
 80022d2:	429c      	cmp	r4, r3
 80022d4:	d120      	bne.n	8002318 <_puts_r+0x64>
 80022d6:	686c      	ldr	r4, [r5, #4]
 80022d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80022da:	07db      	lsls	r3, r3, #31
 80022dc:	d405      	bmi.n	80022ea <_puts_r+0x36>
 80022de:	89a3      	ldrh	r3, [r4, #12]
 80022e0:	0598      	lsls	r0, r3, #22
 80022e2:	d402      	bmi.n	80022ea <_puts_r+0x36>
 80022e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80022e6:	f000 fad3 	bl	8002890 <__retarget_lock_acquire_recursive>
 80022ea:	89a3      	ldrh	r3, [r4, #12]
 80022ec:	0719      	lsls	r1, r3, #28
 80022ee:	d51d      	bpl.n	800232c <_puts_r+0x78>
 80022f0:	6923      	ldr	r3, [r4, #16]
 80022f2:	b1db      	cbz	r3, 800232c <_puts_r+0x78>
 80022f4:	3e01      	subs	r6, #1
 80022f6:	68a3      	ldr	r3, [r4, #8]
 80022f8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80022fc:	3b01      	subs	r3, #1
 80022fe:	60a3      	str	r3, [r4, #8]
 8002300:	bb39      	cbnz	r1, 8002352 <_puts_r+0x9e>
 8002302:	2b00      	cmp	r3, #0
 8002304:	da38      	bge.n	8002378 <_puts_r+0xc4>
 8002306:	4622      	mov	r2, r4
 8002308:	210a      	movs	r1, #10
 800230a:	4628      	mov	r0, r5
 800230c:	f000 f848 	bl	80023a0 <__swbuf_r>
 8002310:	3001      	adds	r0, #1
 8002312:	d011      	beq.n	8002338 <_puts_r+0x84>
 8002314:	250a      	movs	r5, #10
 8002316:	e011      	b.n	800233c <_puts_r+0x88>
 8002318:	4b1b      	ldr	r3, [pc, #108]	; (8002388 <_puts_r+0xd4>)
 800231a:	429c      	cmp	r4, r3
 800231c:	d101      	bne.n	8002322 <_puts_r+0x6e>
 800231e:	68ac      	ldr	r4, [r5, #8]
 8002320:	e7da      	b.n	80022d8 <_puts_r+0x24>
 8002322:	4b1a      	ldr	r3, [pc, #104]	; (800238c <_puts_r+0xd8>)
 8002324:	429c      	cmp	r4, r3
 8002326:	bf08      	it	eq
 8002328:	68ec      	ldreq	r4, [r5, #12]
 800232a:	e7d5      	b.n	80022d8 <_puts_r+0x24>
 800232c:	4621      	mov	r1, r4
 800232e:	4628      	mov	r0, r5
 8002330:	f000 f888 	bl	8002444 <__swsetup_r>
 8002334:	2800      	cmp	r0, #0
 8002336:	d0dd      	beq.n	80022f4 <_puts_r+0x40>
 8002338:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800233c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800233e:	07da      	lsls	r2, r3, #31
 8002340:	d405      	bmi.n	800234e <_puts_r+0x9a>
 8002342:	89a3      	ldrh	r3, [r4, #12]
 8002344:	059b      	lsls	r3, r3, #22
 8002346:	d402      	bmi.n	800234e <_puts_r+0x9a>
 8002348:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800234a:	f000 faa2 	bl	8002892 <__retarget_lock_release_recursive>
 800234e:	4628      	mov	r0, r5
 8002350:	bd70      	pop	{r4, r5, r6, pc}
 8002352:	2b00      	cmp	r3, #0
 8002354:	da04      	bge.n	8002360 <_puts_r+0xac>
 8002356:	69a2      	ldr	r2, [r4, #24]
 8002358:	429a      	cmp	r2, r3
 800235a:	dc06      	bgt.n	800236a <_puts_r+0xb6>
 800235c:	290a      	cmp	r1, #10
 800235e:	d004      	beq.n	800236a <_puts_r+0xb6>
 8002360:	6823      	ldr	r3, [r4, #0]
 8002362:	1c5a      	adds	r2, r3, #1
 8002364:	6022      	str	r2, [r4, #0]
 8002366:	7019      	strb	r1, [r3, #0]
 8002368:	e7c5      	b.n	80022f6 <_puts_r+0x42>
 800236a:	4622      	mov	r2, r4
 800236c:	4628      	mov	r0, r5
 800236e:	f000 f817 	bl	80023a0 <__swbuf_r>
 8002372:	3001      	adds	r0, #1
 8002374:	d1bf      	bne.n	80022f6 <_puts_r+0x42>
 8002376:	e7df      	b.n	8002338 <_puts_r+0x84>
 8002378:	6823      	ldr	r3, [r4, #0]
 800237a:	250a      	movs	r5, #10
 800237c:	1c5a      	adds	r2, r3, #1
 800237e:	6022      	str	r2, [r4, #0]
 8002380:	701d      	strb	r5, [r3, #0]
 8002382:	e7db      	b.n	800233c <_puts_r+0x88>
 8002384:	08002d14 	.word	0x08002d14
 8002388:	08002d34 	.word	0x08002d34
 800238c:	08002cf4 	.word	0x08002cf4

08002390 <puts>:
 8002390:	4b02      	ldr	r3, [pc, #8]	; (800239c <puts+0xc>)
 8002392:	4601      	mov	r1, r0
 8002394:	6818      	ldr	r0, [r3, #0]
 8002396:	f7ff bf8d 	b.w	80022b4 <_puts_r>
 800239a:	bf00      	nop
 800239c:	2000000c 	.word	0x2000000c

080023a0 <__swbuf_r>:
 80023a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023a2:	460e      	mov	r6, r1
 80023a4:	4614      	mov	r4, r2
 80023a6:	4605      	mov	r5, r0
 80023a8:	b118      	cbz	r0, 80023b2 <__swbuf_r+0x12>
 80023aa:	6983      	ldr	r3, [r0, #24]
 80023ac:	b90b      	cbnz	r3, 80023b2 <__swbuf_r+0x12>
 80023ae:	f000 f9d1 	bl	8002754 <__sinit>
 80023b2:	4b21      	ldr	r3, [pc, #132]	; (8002438 <__swbuf_r+0x98>)
 80023b4:	429c      	cmp	r4, r3
 80023b6:	d12b      	bne.n	8002410 <__swbuf_r+0x70>
 80023b8:	686c      	ldr	r4, [r5, #4]
 80023ba:	69a3      	ldr	r3, [r4, #24]
 80023bc:	60a3      	str	r3, [r4, #8]
 80023be:	89a3      	ldrh	r3, [r4, #12]
 80023c0:	071a      	lsls	r2, r3, #28
 80023c2:	d52f      	bpl.n	8002424 <__swbuf_r+0x84>
 80023c4:	6923      	ldr	r3, [r4, #16]
 80023c6:	b36b      	cbz	r3, 8002424 <__swbuf_r+0x84>
 80023c8:	6923      	ldr	r3, [r4, #16]
 80023ca:	6820      	ldr	r0, [r4, #0]
 80023cc:	1ac0      	subs	r0, r0, r3
 80023ce:	6963      	ldr	r3, [r4, #20]
 80023d0:	b2f6      	uxtb	r6, r6
 80023d2:	4283      	cmp	r3, r0
 80023d4:	4637      	mov	r7, r6
 80023d6:	dc04      	bgt.n	80023e2 <__swbuf_r+0x42>
 80023d8:	4621      	mov	r1, r4
 80023da:	4628      	mov	r0, r5
 80023dc:	f000 f926 	bl	800262c <_fflush_r>
 80023e0:	bb30      	cbnz	r0, 8002430 <__swbuf_r+0x90>
 80023e2:	68a3      	ldr	r3, [r4, #8]
 80023e4:	3b01      	subs	r3, #1
 80023e6:	60a3      	str	r3, [r4, #8]
 80023e8:	6823      	ldr	r3, [r4, #0]
 80023ea:	1c5a      	adds	r2, r3, #1
 80023ec:	6022      	str	r2, [r4, #0]
 80023ee:	701e      	strb	r6, [r3, #0]
 80023f0:	6963      	ldr	r3, [r4, #20]
 80023f2:	3001      	adds	r0, #1
 80023f4:	4283      	cmp	r3, r0
 80023f6:	d004      	beq.n	8002402 <__swbuf_r+0x62>
 80023f8:	89a3      	ldrh	r3, [r4, #12]
 80023fa:	07db      	lsls	r3, r3, #31
 80023fc:	d506      	bpl.n	800240c <__swbuf_r+0x6c>
 80023fe:	2e0a      	cmp	r6, #10
 8002400:	d104      	bne.n	800240c <__swbuf_r+0x6c>
 8002402:	4621      	mov	r1, r4
 8002404:	4628      	mov	r0, r5
 8002406:	f000 f911 	bl	800262c <_fflush_r>
 800240a:	b988      	cbnz	r0, 8002430 <__swbuf_r+0x90>
 800240c:	4638      	mov	r0, r7
 800240e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002410:	4b0a      	ldr	r3, [pc, #40]	; (800243c <__swbuf_r+0x9c>)
 8002412:	429c      	cmp	r4, r3
 8002414:	d101      	bne.n	800241a <__swbuf_r+0x7a>
 8002416:	68ac      	ldr	r4, [r5, #8]
 8002418:	e7cf      	b.n	80023ba <__swbuf_r+0x1a>
 800241a:	4b09      	ldr	r3, [pc, #36]	; (8002440 <__swbuf_r+0xa0>)
 800241c:	429c      	cmp	r4, r3
 800241e:	bf08      	it	eq
 8002420:	68ec      	ldreq	r4, [r5, #12]
 8002422:	e7ca      	b.n	80023ba <__swbuf_r+0x1a>
 8002424:	4621      	mov	r1, r4
 8002426:	4628      	mov	r0, r5
 8002428:	f000 f80c 	bl	8002444 <__swsetup_r>
 800242c:	2800      	cmp	r0, #0
 800242e:	d0cb      	beq.n	80023c8 <__swbuf_r+0x28>
 8002430:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002434:	e7ea      	b.n	800240c <__swbuf_r+0x6c>
 8002436:	bf00      	nop
 8002438:	08002d14 	.word	0x08002d14
 800243c:	08002d34 	.word	0x08002d34
 8002440:	08002cf4 	.word	0x08002cf4

08002444 <__swsetup_r>:
 8002444:	4b32      	ldr	r3, [pc, #200]	; (8002510 <__swsetup_r+0xcc>)
 8002446:	b570      	push	{r4, r5, r6, lr}
 8002448:	681d      	ldr	r5, [r3, #0]
 800244a:	4606      	mov	r6, r0
 800244c:	460c      	mov	r4, r1
 800244e:	b125      	cbz	r5, 800245a <__swsetup_r+0x16>
 8002450:	69ab      	ldr	r3, [r5, #24]
 8002452:	b913      	cbnz	r3, 800245a <__swsetup_r+0x16>
 8002454:	4628      	mov	r0, r5
 8002456:	f000 f97d 	bl	8002754 <__sinit>
 800245a:	4b2e      	ldr	r3, [pc, #184]	; (8002514 <__swsetup_r+0xd0>)
 800245c:	429c      	cmp	r4, r3
 800245e:	d10f      	bne.n	8002480 <__swsetup_r+0x3c>
 8002460:	686c      	ldr	r4, [r5, #4]
 8002462:	89a3      	ldrh	r3, [r4, #12]
 8002464:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002468:	0719      	lsls	r1, r3, #28
 800246a:	d42c      	bmi.n	80024c6 <__swsetup_r+0x82>
 800246c:	06dd      	lsls	r5, r3, #27
 800246e:	d411      	bmi.n	8002494 <__swsetup_r+0x50>
 8002470:	2309      	movs	r3, #9
 8002472:	6033      	str	r3, [r6, #0]
 8002474:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002478:	81a3      	strh	r3, [r4, #12]
 800247a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800247e:	e03e      	b.n	80024fe <__swsetup_r+0xba>
 8002480:	4b25      	ldr	r3, [pc, #148]	; (8002518 <__swsetup_r+0xd4>)
 8002482:	429c      	cmp	r4, r3
 8002484:	d101      	bne.n	800248a <__swsetup_r+0x46>
 8002486:	68ac      	ldr	r4, [r5, #8]
 8002488:	e7eb      	b.n	8002462 <__swsetup_r+0x1e>
 800248a:	4b24      	ldr	r3, [pc, #144]	; (800251c <__swsetup_r+0xd8>)
 800248c:	429c      	cmp	r4, r3
 800248e:	bf08      	it	eq
 8002490:	68ec      	ldreq	r4, [r5, #12]
 8002492:	e7e6      	b.n	8002462 <__swsetup_r+0x1e>
 8002494:	0758      	lsls	r0, r3, #29
 8002496:	d512      	bpl.n	80024be <__swsetup_r+0x7a>
 8002498:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800249a:	b141      	cbz	r1, 80024ae <__swsetup_r+0x6a>
 800249c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80024a0:	4299      	cmp	r1, r3
 80024a2:	d002      	beq.n	80024aa <__swsetup_r+0x66>
 80024a4:	4630      	mov	r0, r6
 80024a6:	f000 fa5b 	bl	8002960 <_free_r>
 80024aa:	2300      	movs	r3, #0
 80024ac:	6363      	str	r3, [r4, #52]	; 0x34
 80024ae:	89a3      	ldrh	r3, [r4, #12]
 80024b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80024b4:	81a3      	strh	r3, [r4, #12]
 80024b6:	2300      	movs	r3, #0
 80024b8:	6063      	str	r3, [r4, #4]
 80024ba:	6923      	ldr	r3, [r4, #16]
 80024bc:	6023      	str	r3, [r4, #0]
 80024be:	89a3      	ldrh	r3, [r4, #12]
 80024c0:	f043 0308 	orr.w	r3, r3, #8
 80024c4:	81a3      	strh	r3, [r4, #12]
 80024c6:	6923      	ldr	r3, [r4, #16]
 80024c8:	b94b      	cbnz	r3, 80024de <__swsetup_r+0x9a>
 80024ca:	89a3      	ldrh	r3, [r4, #12]
 80024cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80024d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024d4:	d003      	beq.n	80024de <__swsetup_r+0x9a>
 80024d6:	4621      	mov	r1, r4
 80024d8:	4630      	mov	r0, r6
 80024da:	f000 fa01 	bl	80028e0 <__smakebuf_r>
 80024de:	89a0      	ldrh	r0, [r4, #12]
 80024e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80024e4:	f010 0301 	ands.w	r3, r0, #1
 80024e8:	d00a      	beq.n	8002500 <__swsetup_r+0xbc>
 80024ea:	2300      	movs	r3, #0
 80024ec:	60a3      	str	r3, [r4, #8]
 80024ee:	6963      	ldr	r3, [r4, #20]
 80024f0:	425b      	negs	r3, r3
 80024f2:	61a3      	str	r3, [r4, #24]
 80024f4:	6923      	ldr	r3, [r4, #16]
 80024f6:	b943      	cbnz	r3, 800250a <__swsetup_r+0xc6>
 80024f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80024fc:	d1ba      	bne.n	8002474 <__swsetup_r+0x30>
 80024fe:	bd70      	pop	{r4, r5, r6, pc}
 8002500:	0781      	lsls	r1, r0, #30
 8002502:	bf58      	it	pl
 8002504:	6963      	ldrpl	r3, [r4, #20]
 8002506:	60a3      	str	r3, [r4, #8]
 8002508:	e7f4      	b.n	80024f4 <__swsetup_r+0xb0>
 800250a:	2000      	movs	r0, #0
 800250c:	e7f7      	b.n	80024fe <__swsetup_r+0xba>
 800250e:	bf00      	nop
 8002510:	2000000c 	.word	0x2000000c
 8002514:	08002d14 	.word	0x08002d14
 8002518:	08002d34 	.word	0x08002d34
 800251c:	08002cf4 	.word	0x08002cf4

08002520 <__sflush_r>:
 8002520:	898a      	ldrh	r2, [r1, #12]
 8002522:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002526:	4605      	mov	r5, r0
 8002528:	0710      	lsls	r0, r2, #28
 800252a:	460c      	mov	r4, r1
 800252c:	d458      	bmi.n	80025e0 <__sflush_r+0xc0>
 800252e:	684b      	ldr	r3, [r1, #4]
 8002530:	2b00      	cmp	r3, #0
 8002532:	dc05      	bgt.n	8002540 <__sflush_r+0x20>
 8002534:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002536:	2b00      	cmp	r3, #0
 8002538:	dc02      	bgt.n	8002540 <__sflush_r+0x20>
 800253a:	2000      	movs	r0, #0
 800253c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002540:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002542:	2e00      	cmp	r6, #0
 8002544:	d0f9      	beq.n	800253a <__sflush_r+0x1a>
 8002546:	2300      	movs	r3, #0
 8002548:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800254c:	682f      	ldr	r7, [r5, #0]
 800254e:	602b      	str	r3, [r5, #0]
 8002550:	d032      	beq.n	80025b8 <__sflush_r+0x98>
 8002552:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002554:	89a3      	ldrh	r3, [r4, #12]
 8002556:	075a      	lsls	r2, r3, #29
 8002558:	d505      	bpl.n	8002566 <__sflush_r+0x46>
 800255a:	6863      	ldr	r3, [r4, #4]
 800255c:	1ac0      	subs	r0, r0, r3
 800255e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002560:	b10b      	cbz	r3, 8002566 <__sflush_r+0x46>
 8002562:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002564:	1ac0      	subs	r0, r0, r3
 8002566:	2300      	movs	r3, #0
 8002568:	4602      	mov	r2, r0
 800256a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800256c:	6a21      	ldr	r1, [r4, #32]
 800256e:	4628      	mov	r0, r5
 8002570:	47b0      	blx	r6
 8002572:	1c43      	adds	r3, r0, #1
 8002574:	89a3      	ldrh	r3, [r4, #12]
 8002576:	d106      	bne.n	8002586 <__sflush_r+0x66>
 8002578:	6829      	ldr	r1, [r5, #0]
 800257a:	291d      	cmp	r1, #29
 800257c:	d82c      	bhi.n	80025d8 <__sflush_r+0xb8>
 800257e:	4a2a      	ldr	r2, [pc, #168]	; (8002628 <__sflush_r+0x108>)
 8002580:	40ca      	lsrs	r2, r1
 8002582:	07d6      	lsls	r6, r2, #31
 8002584:	d528      	bpl.n	80025d8 <__sflush_r+0xb8>
 8002586:	2200      	movs	r2, #0
 8002588:	6062      	str	r2, [r4, #4]
 800258a:	04d9      	lsls	r1, r3, #19
 800258c:	6922      	ldr	r2, [r4, #16]
 800258e:	6022      	str	r2, [r4, #0]
 8002590:	d504      	bpl.n	800259c <__sflush_r+0x7c>
 8002592:	1c42      	adds	r2, r0, #1
 8002594:	d101      	bne.n	800259a <__sflush_r+0x7a>
 8002596:	682b      	ldr	r3, [r5, #0]
 8002598:	b903      	cbnz	r3, 800259c <__sflush_r+0x7c>
 800259a:	6560      	str	r0, [r4, #84]	; 0x54
 800259c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800259e:	602f      	str	r7, [r5, #0]
 80025a0:	2900      	cmp	r1, #0
 80025a2:	d0ca      	beq.n	800253a <__sflush_r+0x1a>
 80025a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80025a8:	4299      	cmp	r1, r3
 80025aa:	d002      	beq.n	80025b2 <__sflush_r+0x92>
 80025ac:	4628      	mov	r0, r5
 80025ae:	f000 f9d7 	bl	8002960 <_free_r>
 80025b2:	2000      	movs	r0, #0
 80025b4:	6360      	str	r0, [r4, #52]	; 0x34
 80025b6:	e7c1      	b.n	800253c <__sflush_r+0x1c>
 80025b8:	6a21      	ldr	r1, [r4, #32]
 80025ba:	2301      	movs	r3, #1
 80025bc:	4628      	mov	r0, r5
 80025be:	47b0      	blx	r6
 80025c0:	1c41      	adds	r1, r0, #1
 80025c2:	d1c7      	bne.n	8002554 <__sflush_r+0x34>
 80025c4:	682b      	ldr	r3, [r5, #0]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d0c4      	beq.n	8002554 <__sflush_r+0x34>
 80025ca:	2b1d      	cmp	r3, #29
 80025cc:	d001      	beq.n	80025d2 <__sflush_r+0xb2>
 80025ce:	2b16      	cmp	r3, #22
 80025d0:	d101      	bne.n	80025d6 <__sflush_r+0xb6>
 80025d2:	602f      	str	r7, [r5, #0]
 80025d4:	e7b1      	b.n	800253a <__sflush_r+0x1a>
 80025d6:	89a3      	ldrh	r3, [r4, #12]
 80025d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025dc:	81a3      	strh	r3, [r4, #12]
 80025de:	e7ad      	b.n	800253c <__sflush_r+0x1c>
 80025e0:	690f      	ldr	r7, [r1, #16]
 80025e2:	2f00      	cmp	r7, #0
 80025e4:	d0a9      	beq.n	800253a <__sflush_r+0x1a>
 80025e6:	0793      	lsls	r3, r2, #30
 80025e8:	680e      	ldr	r6, [r1, #0]
 80025ea:	bf08      	it	eq
 80025ec:	694b      	ldreq	r3, [r1, #20]
 80025ee:	600f      	str	r7, [r1, #0]
 80025f0:	bf18      	it	ne
 80025f2:	2300      	movne	r3, #0
 80025f4:	eba6 0807 	sub.w	r8, r6, r7
 80025f8:	608b      	str	r3, [r1, #8]
 80025fa:	f1b8 0f00 	cmp.w	r8, #0
 80025fe:	dd9c      	ble.n	800253a <__sflush_r+0x1a>
 8002600:	6a21      	ldr	r1, [r4, #32]
 8002602:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002604:	4643      	mov	r3, r8
 8002606:	463a      	mov	r2, r7
 8002608:	4628      	mov	r0, r5
 800260a:	47b0      	blx	r6
 800260c:	2800      	cmp	r0, #0
 800260e:	dc06      	bgt.n	800261e <__sflush_r+0xfe>
 8002610:	89a3      	ldrh	r3, [r4, #12]
 8002612:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002616:	81a3      	strh	r3, [r4, #12]
 8002618:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800261c:	e78e      	b.n	800253c <__sflush_r+0x1c>
 800261e:	4407      	add	r7, r0
 8002620:	eba8 0800 	sub.w	r8, r8, r0
 8002624:	e7e9      	b.n	80025fa <__sflush_r+0xda>
 8002626:	bf00      	nop
 8002628:	20400001 	.word	0x20400001

0800262c <_fflush_r>:
 800262c:	b538      	push	{r3, r4, r5, lr}
 800262e:	690b      	ldr	r3, [r1, #16]
 8002630:	4605      	mov	r5, r0
 8002632:	460c      	mov	r4, r1
 8002634:	b913      	cbnz	r3, 800263c <_fflush_r+0x10>
 8002636:	2500      	movs	r5, #0
 8002638:	4628      	mov	r0, r5
 800263a:	bd38      	pop	{r3, r4, r5, pc}
 800263c:	b118      	cbz	r0, 8002646 <_fflush_r+0x1a>
 800263e:	6983      	ldr	r3, [r0, #24]
 8002640:	b90b      	cbnz	r3, 8002646 <_fflush_r+0x1a>
 8002642:	f000 f887 	bl	8002754 <__sinit>
 8002646:	4b14      	ldr	r3, [pc, #80]	; (8002698 <_fflush_r+0x6c>)
 8002648:	429c      	cmp	r4, r3
 800264a:	d11b      	bne.n	8002684 <_fflush_r+0x58>
 800264c:	686c      	ldr	r4, [r5, #4]
 800264e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d0ef      	beq.n	8002636 <_fflush_r+0xa>
 8002656:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002658:	07d0      	lsls	r0, r2, #31
 800265a:	d404      	bmi.n	8002666 <_fflush_r+0x3a>
 800265c:	0599      	lsls	r1, r3, #22
 800265e:	d402      	bmi.n	8002666 <_fflush_r+0x3a>
 8002660:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002662:	f000 f915 	bl	8002890 <__retarget_lock_acquire_recursive>
 8002666:	4628      	mov	r0, r5
 8002668:	4621      	mov	r1, r4
 800266a:	f7ff ff59 	bl	8002520 <__sflush_r>
 800266e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002670:	07da      	lsls	r2, r3, #31
 8002672:	4605      	mov	r5, r0
 8002674:	d4e0      	bmi.n	8002638 <_fflush_r+0xc>
 8002676:	89a3      	ldrh	r3, [r4, #12]
 8002678:	059b      	lsls	r3, r3, #22
 800267a:	d4dd      	bmi.n	8002638 <_fflush_r+0xc>
 800267c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800267e:	f000 f908 	bl	8002892 <__retarget_lock_release_recursive>
 8002682:	e7d9      	b.n	8002638 <_fflush_r+0xc>
 8002684:	4b05      	ldr	r3, [pc, #20]	; (800269c <_fflush_r+0x70>)
 8002686:	429c      	cmp	r4, r3
 8002688:	d101      	bne.n	800268e <_fflush_r+0x62>
 800268a:	68ac      	ldr	r4, [r5, #8]
 800268c:	e7df      	b.n	800264e <_fflush_r+0x22>
 800268e:	4b04      	ldr	r3, [pc, #16]	; (80026a0 <_fflush_r+0x74>)
 8002690:	429c      	cmp	r4, r3
 8002692:	bf08      	it	eq
 8002694:	68ec      	ldreq	r4, [r5, #12]
 8002696:	e7da      	b.n	800264e <_fflush_r+0x22>
 8002698:	08002d14 	.word	0x08002d14
 800269c:	08002d34 	.word	0x08002d34
 80026a0:	08002cf4 	.word	0x08002cf4

080026a4 <std>:
 80026a4:	2300      	movs	r3, #0
 80026a6:	b510      	push	{r4, lr}
 80026a8:	4604      	mov	r4, r0
 80026aa:	e9c0 3300 	strd	r3, r3, [r0]
 80026ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80026b2:	6083      	str	r3, [r0, #8]
 80026b4:	8181      	strh	r1, [r0, #12]
 80026b6:	6643      	str	r3, [r0, #100]	; 0x64
 80026b8:	81c2      	strh	r2, [r0, #14]
 80026ba:	6183      	str	r3, [r0, #24]
 80026bc:	4619      	mov	r1, r3
 80026be:	2208      	movs	r2, #8
 80026c0:	305c      	adds	r0, #92	; 0x5c
 80026c2:	f7ff fdef 	bl	80022a4 <memset>
 80026c6:	4b05      	ldr	r3, [pc, #20]	; (80026dc <std+0x38>)
 80026c8:	6263      	str	r3, [r4, #36]	; 0x24
 80026ca:	4b05      	ldr	r3, [pc, #20]	; (80026e0 <std+0x3c>)
 80026cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80026ce:	4b05      	ldr	r3, [pc, #20]	; (80026e4 <std+0x40>)
 80026d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80026d2:	4b05      	ldr	r3, [pc, #20]	; (80026e8 <std+0x44>)
 80026d4:	6224      	str	r4, [r4, #32]
 80026d6:	6323      	str	r3, [r4, #48]	; 0x30
 80026d8:	bd10      	pop	{r4, pc}
 80026da:	bf00      	nop
 80026dc:	08002b41 	.word	0x08002b41
 80026e0:	08002b63 	.word	0x08002b63
 80026e4:	08002b9b 	.word	0x08002b9b
 80026e8:	08002bbf 	.word	0x08002bbf

080026ec <_cleanup_r>:
 80026ec:	4901      	ldr	r1, [pc, #4]	; (80026f4 <_cleanup_r+0x8>)
 80026ee:	f000 b8af 	b.w	8002850 <_fwalk_reent>
 80026f2:	bf00      	nop
 80026f4:	0800262d 	.word	0x0800262d

080026f8 <__sfmoreglue>:
 80026f8:	b570      	push	{r4, r5, r6, lr}
 80026fa:	2268      	movs	r2, #104	; 0x68
 80026fc:	1e4d      	subs	r5, r1, #1
 80026fe:	4355      	muls	r5, r2
 8002700:	460e      	mov	r6, r1
 8002702:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002706:	f000 f997 	bl	8002a38 <_malloc_r>
 800270a:	4604      	mov	r4, r0
 800270c:	b140      	cbz	r0, 8002720 <__sfmoreglue+0x28>
 800270e:	2100      	movs	r1, #0
 8002710:	e9c0 1600 	strd	r1, r6, [r0]
 8002714:	300c      	adds	r0, #12
 8002716:	60a0      	str	r0, [r4, #8]
 8002718:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800271c:	f7ff fdc2 	bl	80022a4 <memset>
 8002720:	4620      	mov	r0, r4
 8002722:	bd70      	pop	{r4, r5, r6, pc}

08002724 <__sfp_lock_acquire>:
 8002724:	4801      	ldr	r0, [pc, #4]	; (800272c <__sfp_lock_acquire+0x8>)
 8002726:	f000 b8b3 	b.w	8002890 <__retarget_lock_acquire_recursive>
 800272a:	bf00      	nop
 800272c:	200000d9 	.word	0x200000d9

08002730 <__sfp_lock_release>:
 8002730:	4801      	ldr	r0, [pc, #4]	; (8002738 <__sfp_lock_release+0x8>)
 8002732:	f000 b8ae 	b.w	8002892 <__retarget_lock_release_recursive>
 8002736:	bf00      	nop
 8002738:	200000d9 	.word	0x200000d9

0800273c <__sinit_lock_acquire>:
 800273c:	4801      	ldr	r0, [pc, #4]	; (8002744 <__sinit_lock_acquire+0x8>)
 800273e:	f000 b8a7 	b.w	8002890 <__retarget_lock_acquire_recursive>
 8002742:	bf00      	nop
 8002744:	200000da 	.word	0x200000da

08002748 <__sinit_lock_release>:
 8002748:	4801      	ldr	r0, [pc, #4]	; (8002750 <__sinit_lock_release+0x8>)
 800274a:	f000 b8a2 	b.w	8002892 <__retarget_lock_release_recursive>
 800274e:	bf00      	nop
 8002750:	200000da 	.word	0x200000da

08002754 <__sinit>:
 8002754:	b510      	push	{r4, lr}
 8002756:	4604      	mov	r4, r0
 8002758:	f7ff fff0 	bl	800273c <__sinit_lock_acquire>
 800275c:	69a3      	ldr	r3, [r4, #24]
 800275e:	b11b      	cbz	r3, 8002768 <__sinit+0x14>
 8002760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002764:	f7ff bff0 	b.w	8002748 <__sinit_lock_release>
 8002768:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800276c:	6523      	str	r3, [r4, #80]	; 0x50
 800276e:	4b13      	ldr	r3, [pc, #76]	; (80027bc <__sinit+0x68>)
 8002770:	4a13      	ldr	r2, [pc, #76]	; (80027c0 <__sinit+0x6c>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	62a2      	str	r2, [r4, #40]	; 0x28
 8002776:	42a3      	cmp	r3, r4
 8002778:	bf04      	itt	eq
 800277a:	2301      	moveq	r3, #1
 800277c:	61a3      	streq	r3, [r4, #24]
 800277e:	4620      	mov	r0, r4
 8002780:	f000 f820 	bl	80027c4 <__sfp>
 8002784:	6060      	str	r0, [r4, #4]
 8002786:	4620      	mov	r0, r4
 8002788:	f000 f81c 	bl	80027c4 <__sfp>
 800278c:	60a0      	str	r0, [r4, #8]
 800278e:	4620      	mov	r0, r4
 8002790:	f000 f818 	bl	80027c4 <__sfp>
 8002794:	2200      	movs	r2, #0
 8002796:	60e0      	str	r0, [r4, #12]
 8002798:	2104      	movs	r1, #4
 800279a:	6860      	ldr	r0, [r4, #4]
 800279c:	f7ff ff82 	bl	80026a4 <std>
 80027a0:	68a0      	ldr	r0, [r4, #8]
 80027a2:	2201      	movs	r2, #1
 80027a4:	2109      	movs	r1, #9
 80027a6:	f7ff ff7d 	bl	80026a4 <std>
 80027aa:	68e0      	ldr	r0, [r4, #12]
 80027ac:	2202      	movs	r2, #2
 80027ae:	2112      	movs	r1, #18
 80027b0:	f7ff ff78 	bl	80026a4 <std>
 80027b4:	2301      	movs	r3, #1
 80027b6:	61a3      	str	r3, [r4, #24]
 80027b8:	e7d2      	b.n	8002760 <__sinit+0xc>
 80027ba:	bf00      	nop
 80027bc:	08002cf0 	.word	0x08002cf0
 80027c0:	080026ed 	.word	0x080026ed

080027c4 <__sfp>:
 80027c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027c6:	4607      	mov	r7, r0
 80027c8:	f7ff ffac 	bl	8002724 <__sfp_lock_acquire>
 80027cc:	4b1e      	ldr	r3, [pc, #120]	; (8002848 <__sfp+0x84>)
 80027ce:	681e      	ldr	r6, [r3, #0]
 80027d0:	69b3      	ldr	r3, [r6, #24]
 80027d2:	b913      	cbnz	r3, 80027da <__sfp+0x16>
 80027d4:	4630      	mov	r0, r6
 80027d6:	f7ff ffbd 	bl	8002754 <__sinit>
 80027da:	3648      	adds	r6, #72	; 0x48
 80027dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80027e0:	3b01      	subs	r3, #1
 80027e2:	d503      	bpl.n	80027ec <__sfp+0x28>
 80027e4:	6833      	ldr	r3, [r6, #0]
 80027e6:	b30b      	cbz	r3, 800282c <__sfp+0x68>
 80027e8:	6836      	ldr	r6, [r6, #0]
 80027ea:	e7f7      	b.n	80027dc <__sfp+0x18>
 80027ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80027f0:	b9d5      	cbnz	r5, 8002828 <__sfp+0x64>
 80027f2:	4b16      	ldr	r3, [pc, #88]	; (800284c <__sfp+0x88>)
 80027f4:	60e3      	str	r3, [r4, #12]
 80027f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80027fa:	6665      	str	r5, [r4, #100]	; 0x64
 80027fc:	f000 f847 	bl	800288e <__retarget_lock_init_recursive>
 8002800:	f7ff ff96 	bl	8002730 <__sfp_lock_release>
 8002804:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002808:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800280c:	6025      	str	r5, [r4, #0]
 800280e:	61a5      	str	r5, [r4, #24]
 8002810:	2208      	movs	r2, #8
 8002812:	4629      	mov	r1, r5
 8002814:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002818:	f7ff fd44 	bl	80022a4 <memset>
 800281c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002820:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002824:	4620      	mov	r0, r4
 8002826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002828:	3468      	adds	r4, #104	; 0x68
 800282a:	e7d9      	b.n	80027e0 <__sfp+0x1c>
 800282c:	2104      	movs	r1, #4
 800282e:	4638      	mov	r0, r7
 8002830:	f7ff ff62 	bl	80026f8 <__sfmoreglue>
 8002834:	4604      	mov	r4, r0
 8002836:	6030      	str	r0, [r6, #0]
 8002838:	2800      	cmp	r0, #0
 800283a:	d1d5      	bne.n	80027e8 <__sfp+0x24>
 800283c:	f7ff ff78 	bl	8002730 <__sfp_lock_release>
 8002840:	230c      	movs	r3, #12
 8002842:	603b      	str	r3, [r7, #0]
 8002844:	e7ee      	b.n	8002824 <__sfp+0x60>
 8002846:	bf00      	nop
 8002848:	08002cf0 	.word	0x08002cf0
 800284c:	ffff0001 	.word	0xffff0001

08002850 <_fwalk_reent>:
 8002850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002854:	4606      	mov	r6, r0
 8002856:	4688      	mov	r8, r1
 8002858:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800285c:	2700      	movs	r7, #0
 800285e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002862:	f1b9 0901 	subs.w	r9, r9, #1
 8002866:	d505      	bpl.n	8002874 <_fwalk_reent+0x24>
 8002868:	6824      	ldr	r4, [r4, #0]
 800286a:	2c00      	cmp	r4, #0
 800286c:	d1f7      	bne.n	800285e <_fwalk_reent+0xe>
 800286e:	4638      	mov	r0, r7
 8002870:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002874:	89ab      	ldrh	r3, [r5, #12]
 8002876:	2b01      	cmp	r3, #1
 8002878:	d907      	bls.n	800288a <_fwalk_reent+0x3a>
 800287a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800287e:	3301      	adds	r3, #1
 8002880:	d003      	beq.n	800288a <_fwalk_reent+0x3a>
 8002882:	4629      	mov	r1, r5
 8002884:	4630      	mov	r0, r6
 8002886:	47c0      	blx	r8
 8002888:	4307      	orrs	r7, r0
 800288a:	3568      	adds	r5, #104	; 0x68
 800288c:	e7e9      	b.n	8002862 <_fwalk_reent+0x12>

0800288e <__retarget_lock_init_recursive>:
 800288e:	4770      	bx	lr

08002890 <__retarget_lock_acquire_recursive>:
 8002890:	4770      	bx	lr

08002892 <__retarget_lock_release_recursive>:
 8002892:	4770      	bx	lr

08002894 <__swhatbuf_r>:
 8002894:	b570      	push	{r4, r5, r6, lr}
 8002896:	460e      	mov	r6, r1
 8002898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800289c:	2900      	cmp	r1, #0
 800289e:	b096      	sub	sp, #88	; 0x58
 80028a0:	4614      	mov	r4, r2
 80028a2:	461d      	mov	r5, r3
 80028a4:	da08      	bge.n	80028b8 <__swhatbuf_r+0x24>
 80028a6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80028aa:	2200      	movs	r2, #0
 80028ac:	602a      	str	r2, [r5, #0]
 80028ae:	061a      	lsls	r2, r3, #24
 80028b0:	d410      	bmi.n	80028d4 <__swhatbuf_r+0x40>
 80028b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028b6:	e00e      	b.n	80028d6 <__swhatbuf_r+0x42>
 80028b8:	466a      	mov	r2, sp
 80028ba:	f000 f9a7 	bl	8002c0c <_fstat_r>
 80028be:	2800      	cmp	r0, #0
 80028c0:	dbf1      	blt.n	80028a6 <__swhatbuf_r+0x12>
 80028c2:	9a01      	ldr	r2, [sp, #4]
 80028c4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80028c8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80028cc:	425a      	negs	r2, r3
 80028ce:	415a      	adcs	r2, r3
 80028d0:	602a      	str	r2, [r5, #0]
 80028d2:	e7ee      	b.n	80028b2 <__swhatbuf_r+0x1e>
 80028d4:	2340      	movs	r3, #64	; 0x40
 80028d6:	2000      	movs	r0, #0
 80028d8:	6023      	str	r3, [r4, #0]
 80028da:	b016      	add	sp, #88	; 0x58
 80028dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080028e0 <__smakebuf_r>:
 80028e0:	898b      	ldrh	r3, [r1, #12]
 80028e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80028e4:	079d      	lsls	r5, r3, #30
 80028e6:	4606      	mov	r6, r0
 80028e8:	460c      	mov	r4, r1
 80028ea:	d507      	bpl.n	80028fc <__smakebuf_r+0x1c>
 80028ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80028f0:	6023      	str	r3, [r4, #0]
 80028f2:	6123      	str	r3, [r4, #16]
 80028f4:	2301      	movs	r3, #1
 80028f6:	6163      	str	r3, [r4, #20]
 80028f8:	b002      	add	sp, #8
 80028fa:	bd70      	pop	{r4, r5, r6, pc}
 80028fc:	ab01      	add	r3, sp, #4
 80028fe:	466a      	mov	r2, sp
 8002900:	f7ff ffc8 	bl	8002894 <__swhatbuf_r>
 8002904:	9900      	ldr	r1, [sp, #0]
 8002906:	4605      	mov	r5, r0
 8002908:	4630      	mov	r0, r6
 800290a:	f000 f895 	bl	8002a38 <_malloc_r>
 800290e:	b948      	cbnz	r0, 8002924 <__smakebuf_r+0x44>
 8002910:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002914:	059a      	lsls	r2, r3, #22
 8002916:	d4ef      	bmi.n	80028f8 <__smakebuf_r+0x18>
 8002918:	f023 0303 	bic.w	r3, r3, #3
 800291c:	f043 0302 	orr.w	r3, r3, #2
 8002920:	81a3      	strh	r3, [r4, #12]
 8002922:	e7e3      	b.n	80028ec <__smakebuf_r+0xc>
 8002924:	4b0d      	ldr	r3, [pc, #52]	; (800295c <__smakebuf_r+0x7c>)
 8002926:	62b3      	str	r3, [r6, #40]	; 0x28
 8002928:	89a3      	ldrh	r3, [r4, #12]
 800292a:	6020      	str	r0, [r4, #0]
 800292c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002930:	81a3      	strh	r3, [r4, #12]
 8002932:	9b00      	ldr	r3, [sp, #0]
 8002934:	6163      	str	r3, [r4, #20]
 8002936:	9b01      	ldr	r3, [sp, #4]
 8002938:	6120      	str	r0, [r4, #16]
 800293a:	b15b      	cbz	r3, 8002954 <__smakebuf_r+0x74>
 800293c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002940:	4630      	mov	r0, r6
 8002942:	f000 f975 	bl	8002c30 <_isatty_r>
 8002946:	b128      	cbz	r0, 8002954 <__smakebuf_r+0x74>
 8002948:	89a3      	ldrh	r3, [r4, #12]
 800294a:	f023 0303 	bic.w	r3, r3, #3
 800294e:	f043 0301 	orr.w	r3, r3, #1
 8002952:	81a3      	strh	r3, [r4, #12]
 8002954:	89a0      	ldrh	r0, [r4, #12]
 8002956:	4305      	orrs	r5, r0
 8002958:	81a5      	strh	r5, [r4, #12]
 800295a:	e7cd      	b.n	80028f8 <__smakebuf_r+0x18>
 800295c:	080026ed 	.word	0x080026ed

08002960 <_free_r>:
 8002960:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002962:	2900      	cmp	r1, #0
 8002964:	d044      	beq.n	80029f0 <_free_r+0x90>
 8002966:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800296a:	9001      	str	r0, [sp, #4]
 800296c:	2b00      	cmp	r3, #0
 800296e:	f1a1 0404 	sub.w	r4, r1, #4
 8002972:	bfb8      	it	lt
 8002974:	18e4      	addlt	r4, r4, r3
 8002976:	f000 f97d 	bl	8002c74 <__malloc_lock>
 800297a:	4a1e      	ldr	r2, [pc, #120]	; (80029f4 <_free_r+0x94>)
 800297c:	9801      	ldr	r0, [sp, #4]
 800297e:	6813      	ldr	r3, [r2, #0]
 8002980:	b933      	cbnz	r3, 8002990 <_free_r+0x30>
 8002982:	6063      	str	r3, [r4, #4]
 8002984:	6014      	str	r4, [r2, #0]
 8002986:	b003      	add	sp, #12
 8002988:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800298c:	f000 b978 	b.w	8002c80 <__malloc_unlock>
 8002990:	42a3      	cmp	r3, r4
 8002992:	d908      	bls.n	80029a6 <_free_r+0x46>
 8002994:	6825      	ldr	r5, [r4, #0]
 8002996:	1961      	adds	r1, r4, r5
 8002998:	428b      	cmp	r3, r1
 800299a:	bf01      	itttt	eq
 800299c:	6819      	ldreq	r1, [r3, #0]
 800299e:	685b      	ldreq	r3, [r3, #4]
 80029a0:	1949      	addeq	r1, r1, r5
 80029a2:	6021      	streq	r1, [r4, #0]
 80029a4:	e7ed      	b.n	8002982 <_free_r+0x22>
 80029a6:	461a      	mov	r2, r3
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	b10b      	cbz	r3, 80029b0 <_free_r+0x50>
 80029ac:	42a3      	cmp	r3, r4
 80029ae:	d9fa      	bls.n	80029a6 <_free_r+0x46>
 80029b0:	6811      	ldr	r1, [r2, #0]
 80029b2:	1855      	adds	r5, r2, r1
 80029b4:	42a5      	cmp	r5, r4
 80029b6:	d10b      	bne.n	80029d0 <_free_r+0x70>
 80029b8:	6824      	ldr	r4, [r4, #0]
 80029ba:	4421      	add	r1, r4
 80029bc:	1854      	adds	r4, r2, r1
 80029be:	42a3      	cmp	r3, r4
 80029c0:	6011      	str	r1, [r2, #0]
 80029c2:	d1e0      	bne.n	8002986 <_free_r+0x26>
 80029c4:	681c      	ldr	r4, [r3, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	6053      	str	r3, [r2, #4]
 80029ca:	4421      	add	r1, r4
 80029cc:	6011      	str	r1, [r2, #0]
 80029ce:	e7da      	b.n	8002986 <_free_r+0x26>
 80029d0:	d902      	bls.n	80029d8 <_free_r+0x78>
 80029d2:	230c      	movs	r3, #12
 80029d4:	6003      	str	r3, [r0, #0]
 80029d6:	e7d6      	b.n	8002986 <_free_r+0x26>
 80029d8:	6825      	ldr	r5, [r4, #0]
 80029da:	1961      	adds	r1, r4, r5
 80029dc:	428b      	cmp	r3, r1
 80029de:	bf04      	itt	eq
 80029e0:	6819      	ldreq	r1, [r3, #0]
 80029e2:	685b      	ldreq	r3, [r3, #4]
 80029e4:	6063      	str	r3, [r4, #4]
 80029e6:	bf04      	itt	eq
 80029e8:	1949      	addeq	r1, r1, r5
 80029ea:	6021      	streq	r1, [r4, #0]
 80029ec:	6054      	str	r4, [r2, #4]
 80029ee:	e7ca      	b.n	8002986 <_free_r+0x26>
 80029f0:	b003      	add	sp, #12
 80029f2:	bd30      	pop	{r4, r5, pc}
 80029f4:	200000dc 	.word	0x200000dc

080029f8 <sbrk_aligned>:
 80029f8:	b570      	push	{r4, r5, r6, lr}
 80029fa:	4e0e      	ldr	r6, [pc, #56]	; (8002a34 <sbrk_aligned+0x3c>)
 80029fc:	460c      	mov	r4, r1
 80029fe:	6831      	ldr	r1, [r6, #0]
 8002a00:	4605      	mov	r5, r0
 8002a02:	b911      	cbnz	r1, 8002a0a <sbrk_aligned+0x12>
 8002a04:	f000 f88c 	bl	8002b20 <_sbrk_r>
 8002a08:	6030      	str	r0, [r6, #0]
 8002a0a:	4621      	mov	r1, r4
 8002a0c:	4628      	mov	r0, r5
 8002a0e:	f000 f887 	bl	8002b20 <_sbrk_r>
 8002a12:	1c43      	adds	r3, r0, #1
 8002a14:	d00a      	beq.n	8002a2c <sbrk_aligned+0x34>
 8002a16:	1cc4      	adds	r4, r0, #3
 8002a18:	f024 0403 	bic.w	r4, r4, #3
 8002a1c:	42a0      	cmp	r0, r4
 8002a1e:	d007      	beq.n	8002a30 <sbrk_aligned+0x38>
 8002a20:	1a21      	subs	r1, r4, r0
 8002a22:	4628      	mov	r0, r5
 8002a24:	f000 f87c 	bl	8002b20 <_sbrk_r>
 8002a28:	3001      	adds	r0, #1
 8002a2a:	d101      	bne.n	8002a30 <sbrk_aligned+0x38>
 8002a2c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002a30:	4620      	mov	r0, r4
 8002a32:	bd70      	pop	{r4, r5, r6, pc}
 8002a34:	200000e0 	.word	0x200000e0

08002a38 <_malloc_r>:
 8002a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a3c:	1ccd      	adds	r5, r1, #3
 8002a3e:	f025 0503 	bic.w	r5, r5, #3
 8002a42:	3508      	adds	r5, #8
 8002a44:	2d0c      	cmp	r5, #12
 8002a46:	bf38      	it	cc
 8002a48:	250c      	movcc	r5, #12
 8002a4a:	2d00      	cmp	r5, #0
 8002a4c:	4607      	mov	r7, r0
 8002a4e:	db01      	blt.n	8002a54 <_malloc_r+0x1c>
 8002a50:	42a9      	cmp	r1, r5
 8002a52:	d905      	bls.n	8002a60 <_malloc_r+0x28>
 8002a54:	230c      	movs	r3, #12
 8002a56:	603b      	str	r3, [r7, #0]
 8002a58:	2600      	movs	r6, #0
 8002a5a:	4630      	mov	r0, r6
 8002a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a60:	4e2e      	ldr	r6, [pc, #184]	; (8002b1c <_malloc_r+0xe4>)
 8002a62:	f000 f907 	bl	8002c74 <__malloc_lock>
 8002a66:	6833      	ldr	r3, [r6, #0]
 8002a68:	461c      	mov	r4, r3
 8002a6a:	bb34      	cbnz	r4, 8002aba <_malloc_r+0x82>
 8002a6c:	4629      	mov	r1, r5
 8002a6e:	4638      	mov	r0, r7
 8002a70:	f7ff ffc2 	bl	80029f8 <sbrk_aligned>
 8002a74:	1c43      	adds	r3, r0, #1
 8002a76:	4604      	mov	r4, r0
 8002a78:	d14d      	bne.n	8002b16 <_malloc_r+0xde>
 8002a7a:	6834      	ldr	r4, [r6, #0]
 8002a7c:	4626      	mov	r6, r4
 8002a7e:	2e00      	cmp	r6, #0
 8002a80:	d140      	bne.n	8002b04 <_malloc_r+0xcc>
 8002a82:	6823      	ldr	r3, [r4, #0]
 8002a84:	4631      	mov	r1, r6
 8002a86:	4638      	mov	r0, r7
 8002a88:	eb04 0803 	add.w	r8, r4, r3
 8002a8c:	f000 f848 	bl	8002b20 <_sbrk_r>
 8002a90:	4580      	cmp	r8, r0
 8002a92:	d13a      	bne.n	8002b0a <_malloc_r+0xd2>
 8002a94:	6821      	ldr	r1, [r4, #0]
 8002a96:	3503      	adds	r5, #3
 8002a98:	1a6d      	subs	r5, r5, r1
 8002a9a:	f025 0503 	bic.w	r5, r5, #3
 8002a9e:	3508      	adds	r5, #8
 8002aa0:	2d0c      	cmp	r5, #12
 8002aa2:	bf38      	it	cc
 8002aa4:	250c      	movcc	r5, #12
 8002aa6:	4629      	mov	r1, r5
 8002aa8:	4638      	mov	r0, r7
 8002aaa:	f7ff ffa5 	bl	80029f8 <sbrk_aligned>
 8002aae:	3001      	adds	r0, #1
 8002ab0:	d02b      	beq.n	8002b0a <_malloc_r+0xd2>
 8002ab2:	6823      	ldr	r3, [r4, #0]
 8002ab4:	442b      	add	r3, r5
 8002ab6:	6023      	str	r3, [r4, #0]
 8002ab8:	e00e      	b.n	8002ad8 <_malloc_r+0xa0>
 8002aba:	6822      	ldr	r2, [r4, #0]
 8002abc:	1b52      	subs	r2, r2, r5
 8002abe:	d41e      	bmi.n	8002afe <_malloc_r+0xc6>
 8002ac0:	2a0b      	cmp	r2, #11
 8002ac2:	d916      	bls.n	8002af2 <_malloc_r+0xba>
 8002ac4:	1961      	adds	r1, r4, r5
 8002ac6:	42a3      	cmp	r3, r4
 8002ac8:	6025      	str	r5, [r4, #0]
 8002aca:	bf18      	it	ne
 8002acc:	6059      	strne	r1, [r3, #4]
 8002ace:	6863      	ldr	r3, [r4, #4]
 8002ad0:	bf08      	it	eq
 8002ad2:	6031      	streq	r1, [r6, #0]
 8002ad4:	5162      	str	r2, [r4, r5]
 8002ad6:	604b      	str	r3, [r1, #4]
 8002ad8:	4638      	mov	r0, r7
 8002ada:	f104 060b 	add.w	r6, r4, #11
 8002ade:	f000 f8cf 	bl	8002c80 <__malloc_unlock>
 8002ae2:	f026 0607 	bic.w	r6, r6, #7
 8002ae6:	1d23      	adds	r3, r4, #4
 8002ae8:	1af2      	subs	r2, r6, r3
 8002aea:	d0b6      	beq.n	8002a5a <_malloc_r+0x22>
 8002aec:	1b9b      	subs	r3, r3, r6
 8002aee:	50a3      	str	r3, [r4, r2]
 8002af0:	e7b3      	b.n	8002a5a <_malloc_r+0x22>
 8002af2:	6862      	ldr	r2, [r4, #4]
 8002af4:	42a3      	cmp	r3, r4
 8002af6:	bf0c      	ite	eq
 8002af8:	6032      	streq	r2, [r6, #0]
 8002afa:	605a      	strne	r2, [r3, #4]
 8002afc:	e7ec      	b.n	8002ad8 <_malloc_r+0xa0>
 8002afe:	4623      	mov	r3, r4
 8002b00:	6864      	ldr	r4, [r4, #4]
 8002b02:	e7b2      	b.n	8002a6a <_malloc_r+0x32>
 8002b04:	4634      	mov	r4, r6
 8002b06:	6876      	ldr	r6, [r6, #4]
 8002b08:	e7b9      	b.n	8002a7e <_malloc_r+0x46>
 8002b0a:	230c      	movs	r3, #12
 8002b0c:	603b      	str	r3, [r7, #0]
 8002b0e:	4638      	mov	r0, r7
 8002b10:	f000 f8b6 	bl	8002c80 <__malloc_unlock>
 8002b14:	e7a1      	b.n	8002a5a <_malloc_r+0x22>
 8002b16:	6025      	str	r5, [r4, #0]
 8002b18:	e7de      	b.n	8002ad8 <_malloc_r+0xa0>
 8002b1a:	bf00      	nop
 8002b1c:	200000dc 	.word	0x200000dc

08002b20 <_sbrk_r>:
 8002b20:	b538      	push	{r3, r4, r5, lr}
 8002b22:	4d06      	ldr	r5, [pc, #24]	; (8002b3c <_sbrk_r+0x1c>)
 8002b24:	2300      	movs	r3, #0
 8002b26:	4604      	mov	r4, r0
 8002b28:	4608      	mov	r0, r1
 8002b2a:	602b      	str	r3, [r5, #0]
 8002b2c:	f7fd ff4a 	bl	80009c4 <_sbrk>
 8002b30:	1c43      	adds	r3, r0, #1
 8002b32:	d102      	bne.n	8002b3a <_sbrk_r+0x1a>
 8002b34:	682b      	ldr	r3, [r5, #0]
 8002b36:	b103      	cbz	r3, 8002b3a <_sbrk_r+0x1a>
 8002b38:	6023      	str	r3, [r4, #0]
 8002b3a:	bd38      	pop	{r3, r4, r5, pc}
 8002b3c:	200000e4 	.word	0x200000e4

08002b40 <__sread>:
 8002b40:	b510      	push	{r4, lr}
 8002b42:	460c      	mov	r4, r1
 8002b44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b48:	f000 f8a0 	bl	8002c8c <_read_r>
 8002b4c:	2800      	cmp	r0, #0
 8002b4e:	bfab      	itete	ge
 8002b50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002b52:	89a3      	ldrhlt	r3, [r4, #12]
 8002b54:	181b      	addge	r3, r3, r0
 8002b56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002b5a:	bfac      	ite	ge
 8002b5c:	6563      	strge	r3, [r4, #84]	; 0x54
 8002b5e:	81a3      	strhlt	r3, [r4, #12]
 8002b60:	bd10      	pop	{r4, pc}

08002b62 <__swrite>:
 8002b62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b66:	461f      	mov	r7, r3
 8002b68:	898b      	ldrh	r3, [r1, #12]
 8002b6a:	05db      	lsls	r3, r3, #23
 8002b6c:	4605      	mov	r5, r0
 8002b6e:	460c      	mov	r4, r1
 8002b70:	4616      	mov	r6, r2
 8002b72:	d505      	bpl.n	8002b80 <__swrite+0x1e>
 8002b74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b78:	2302      	movs	r3, #2
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f000 f868 	bl	8002c50 <_lseek_r>
 8002b80:	89a3      	ldrh	r3, [r4, #12]
 8002b82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002b86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b8a:	81a3      	strh	r3, [r4, #12]
 8002b8c:	4632      	mov	r2, r6
 8002b8e:	463b      	mov	r3, r7
 8002b90:	4628      	mov	r0, r5
 8002b92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002b96:	f000 b817 	b.w	8002bc8 <_write_r>

08002b9a <__sseek>:
 8002b9a:	b510      	push	{r4, lr}
 8002b9c:	460c      	mov	r4, r1
 8002b9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ba2:	f000 f855 	bl	8002c50 <_lseek_r>
 8002ba6:	1c43      	adds	r3, r0, #1
 8002ba8:	89a3      	ldrh	r3, [r4, #12]
 8002baa:	bf15      	itete	ne
 8002bac:	6560      	strne	r0, [r4, #84]	; 0x54
 8002bae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002bb2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002bb6:	81a3      	strheq	r3, [r4, #12]
 8002bb8:	bf18      	it	ne
 8002bba:	81a3      	strhne	r3, [r4, #12]
 8002bbc:	bd10      	pop	{r4, pc}

08002bbe <__sclose>:
 8002bbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002bc2:	f000 b813 	b.w	8002bec <_close_r>
	...

08002bc8 <_write_r>:
 8002bc8:	b538      	push	{r3, r4, r5, lr}
 8002bca:	4d07      	ldr	r5, [pc, #28]	; (8002be8 <_write_r+0x20>)
 8002bcc:	4604      	mov	r4, r0
 8002bce:	4608      	mov	r0, r1
 8002bd0:	4611      	mov	r1, r2
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	602a      	str	r2, [r5, #0]
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	f7fd fea3 	bl	8000922 <_write>
 8002bdc:	1c43      	adds	r3, r0, #1
 8002bde:	d102      	bne.n	8002be6 <_write_r+0x1e>
 8002be0:	682b      	ldr	r3, [r5, #0]
 8002be2:	b103      	cbz	r3, 8002be6 <_write_r+0x1e>
 8002be4:	6023      	str	r3, [r4, #0]
 8002be6:	bd38      	pop	{r3, r4, r5, pc}
 8002be8:	200000e4 	.word	0x200000e4

08002bec <_close_r>:
 8002bec:	b538      	push	{r3, r4, r5, lr}
 8002bee:	4d06      	ldr	r5, [pc, #24]	; (8002c08 <_close_r+0x1c>)
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	4604      	mov	r4, r0
 8002bf4:	4608      	mov	r0, r1
 8002bf6:	602b      	str	r3, [r5, #0]
 8002bf8:	f7fd feaf 	bl	800095a <_close>
 8002bfc:	1c43      	adds	r3, r0, #1
 8002bfe:	d102      	bne.n	8002c06 <_close_r+0x1a>
 8002c00:	682b      	ldr	r3, [r5, #0]
 8002c02:	b103      	cbz	r3, 8002c06 <_close_r+0x1a>
 8002c04:	6023      	str	r3, [r4, #0]
 8002c06:	bd38      	pop	{r3, r4, r5, pc}
 8002c08:	200000e4 	.word	0x200000e4

08002c0c <_fstat_r>:
 8002c0c:	b538      	push	{r3, r4, r5, lr}
 8002c0e:	4d07      	ldr	r5, [pc, #28]	; (8002c2c <_fstat_r+0x20>)
 8002c10:	2300      	movs	r3, #0
 8002c12:	4604      	mov	r4, r0
 8002c14:	4608      	mov	r0, r1
 8002c16:	4611      	mov	r1, r2
 8002c18:	602b      	str	r3, [r5, #0]
 8002c1a:	f7fd feaa 	bl	8000972 <_fstat>
 8002c1e:	1c43      	adds	r3, r0, #1
 8002c20:	d102      	bne.n	8002c28 <_fstat_r+0x1c>
 8002c22:	682b      	ldr	r3, [r5, #0]
 8002c24:	b103      	cbz	r3, 8002c28 <_fstat_r+0x1c>
 8002c26:	6023      	str	r3, [r4, #0]
 8002c28:	bd38      	pop	{r3, r4, r5, pc}
 8002c2a:	bf00      	nop
 8002c2c:	200000e4 	.word	0x200000e4

08002c30 <_isatty_r>:
 8002c30:	b538      	push	{r3, r4, r5, lr}
 8002c32:	4d06      	ldr	r5, [pc, #24]	; (8002c4c <_isatty_r+0x1c>)
 8002c34:	2300      	movs	r3, #0
 8002c36:	4604      	mov	r4, r0
 8002c38:	4608      	mov	r0, r1
 8002c3a:	602b      	str	r3, [r5, #0]
 8002c3c:	f7fd fea9 	bl	8000992 <_isatty>
 8002c40:	1c43      	adds	r3, r0, #1
 8002c42:	d102      	bne.n	8002c4a <_isatty_r+0x1a>
 8002c44:	682b      	ldr	r3, [r5, #0]
 8002c46:	b103      	cbz	r3, 8002c4a <_isatty_r+0x1a>
 8002c48:	6023      	str	r3, [r4, #0]
 8002c4a:	bd38      	pop	{r3, r4, r5, pc}
 8002c4c:	200000e4 	.word	0x200000e4

08002c50 <_lseek_r>:
 8002c50:	b538      	push	{r3, r4, r5, lr}
 8002c52:	4d07      	ldr	r5, [pc, #28]	; (8002c70 <_lseek_r+0x20>)
 8002c54:	4604      	mov	r4, r0
 8002c56:	4608      	mov	r0, r1
 8002c58:	4611      	mov	r1, r2
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	602a      	str	r2, [r5, #0]
 8002c5e:	461a      	mov	r2, r3
 8002c60:	f7fd fea2 	bl	80009a8 <_lseek>
 8002c64:	1c43      	adds	r3, r0, #1
 8002c66:	d102      	bne.n	8002c6e <_lseek_r+0x1e>
 8002c68:	682b      	ldr	r3, [r5, #0]
 8002c6a:	b103      	cbz	r3, 8002c6e <_lseek_r+0x1e>
 8002c6c:	6023      	str	r3, [r4, #0]
 8002c6e:	bd38      	pop	{r3, r4, r5, pc}
 8002c70:	200000e4 	.word	0x200000e4

08002c74 <__malloc_lock>:
 8002c74:	4801      	ldr	r0, [pc, #4]	; (8002c7c <__malloc_lock+0x8>)
 8002c76:	f7ff be0b 	b.w	8002890 <__retarget_lock_acquire_recursive>
 8002c7a:	bf00      	nop
 8002c7c:	200000d8 	.word	0x200000d8

08002c80 <__malloc_unlock>:
 8002c80:	4801      	ldr	r0, [pc, #4]	; (8002c88 <__malloc_unlock+0x8>)
 8002c82:	f7ff be06 	b.w	8002892 <__retarget_lock_release_recursive>
 8002c86:	bf00      	nop
 8002c88:	200000d8 	.word	0x200000d8

08002c8c <_read_r>:
 8002c8c:	b538      	push	{r3, r4, r5, lr}
 8002c8e:	4d07      	ldr	r5, [pc, #28]	; (8002cac <_read_r+0x20>)
 8002c90:	4604      	mov	r4, r0
 8002c92:	4608      	mov	r0, r1
 8002c94:	4611      	mov	r1, r2
 8002c96:	2200      	movs	r2, #0
 8002c98:	602a      	str	r2, [r5, #0]
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	f7fd fe24 	bl	80008e8 <_read>
 8002ca0:	1c43      	adds	r3, r0, #1
 8002ca2:	d102      	bne.n	8002caa <_read_r+0x1e>
 8002ca4:	682b      	ldr	r3, [r5, #0]
 8002ca6:	b103      	cbz	r3, 8002caa <_read_r+0x1e>
 8002ca8:	6023      	str	r3, [r4, #0]
 8002caa:	bd38      	pop	{r3, r4, r5, pc}
 8002cac:	200000e4 	.word	0x200000e4

08002cb0 <_init>:
 8002cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cb2:	bf00      	nop
 8002cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cb6:	bc08      	pop	{r3}
 8002cb8:	469e      	mov	lr, r3
 8002cba:	4770      	bx	lr

08002cbc <_fini>:
 8002cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cbe:	bf00      	nop
 8002cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cc2:	bc08      	pop	{r3}
 8002cc4:	469e      	mov	lr, r3
 8002cc6:	4770      	bx	lr
